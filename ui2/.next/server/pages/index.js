/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/index";
exports.ids = ["pages/index"];
exports.modules = {

/***/ "./gen/pb/svc/manager/manager_pb.js":
/*!******************************************!*\
  !*** ./gen/pb/svc/manager/manager_pb.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("// source: pb/svc/manager/manager.proto\n\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\n/* eslint-disable */\n// @ts-nocheck\nvar jspb = __webpack_require__(/*! google-protobuf */ \"google-protobuf\");\n\nvar goog = jspb;\n\nvar global = function () {\n  return this || window || global || self || Function('return this')();\n}.call(null);\n\nvar pb_unit_job_job_pb = __webpack_require__(/*! ../../../pb/unit/job/job_pb.js */ \"./gen/pb/unit/job/job_pb.js\");\n\ngoog.object.extend(proto, pb_unit_job_job_pb);\n\nvar pb_unit_worker_worker_pb = __webpack_require__(/*! ../../../pb/unit/worker/worker_pb.js */ \"./gen/pb/unit/worker/worker_pb.js\");\n\ngoog.object.extend(proto, pb_unit_worker_worker_pb);\n\nvar pb_unit_article_article_pb = __webpack_require__(/*! ../../../pb/unit/article/article_pb.js */ \"./gen/pb/unit/article/article_pb.js\");\n\ngoog.object.extend(proto, pb_unit_article_article_pb);\ngoog.exportSymbol('proto.pb.svc.manager.CreateNewJobReq', null, global);\ngoog.exportSymbol('proto.pb.svc.manager.CreateNewJobRes', null, global);\ngoog.exportSymbol('proto.pb.svc.manager.GetArticleCountByDayReq', null, global);\ngoog.exportSymbol('proto.pb.svc.manager.GetArticleCountByDayRes', null, global);\ngoog.exportSymbol('proto.pb.svc.manager.GetArticleCountByHourReq', null, global);\ngoog.exportSymbol('proto.pb.svc.manager.GetArticleCountByHourRes', null, global);\ngoog.exportSymbol('proto.pb.svc.manager.GetArticleInfoReq', null, global);\ngoog.exportSymbol('proto.pb.svc.manager.GetArticleInfoRes', null, global);\ngoog.exportSymbol('proto.pb.svc.manager.GetArticleListReq', null, global);\ngoog.exportSymbol('proto.pb.svc.manager.GetArticleListRes', null, global);\ngoog.exportSymbol('proto.pb.svc.manager.GetJobIsReRunReq', null, global);\ngoog.exportSymbol('proto.pb.svc.manager.GetJobIsReRunRes', null, global);\ngoog.exportSymbol('proto.pb.svc.manager.GetJobListReq', null, global);\ngoog.exportSymbol('proto.pb.svc.manager.GetJobListRes', null, global);\ngoog.exportSymbol('proto.pb.svc.manager.GetJobStatusReq', null, global);\ngoog.exportSymbol('proto.pb.svc.manager.GetJobStatusRes', null, global);\ngoog.exportSymbol('proto.pb.svc.manager.GetWorkerListReq', null, global);\ngoog.exportSymbol('proto.pb.svc.manager.GetWorkerListRes', null, global);\ngoog.exportSymbol('proto.pb.svc.manager.ReRunJobReq', null, global);\ngoog.exportSymbol('proto.pb.svc.manager.ReRunJobRes', null, global);\ngoog.exportSymbol('proto.pb.svc.manager.StopJobReq', null, global);\ngoog.exportSymbol('proto.pb.svc.manager.StopJobRes', null, global);\ngoog.exportSymbol('proto.pb.svc.manager.UpdateJobStatusReq', null, global);\ngoog.exportSymbol('proto.pb.svc.manager.UpdateJobStatusRes', null, global);\ngoog.exportSymbol('proto.pb.svc.manager.UpdateWorkerStatusReq', null, global);\ngoog.exportSymbol('proto.pb.svc.manager.UpdateWorkerStatusRes', null, global);\ngoog.exportSymbol('proto.pb.svc.manager.WhenAnalyzerHavingErrReq', null, global);\ngoog.exportSymbol('proto.pb.svc.manager.WhenAnalyzerHavingErrRes', null, global);\ngoog.exportSymbol('proto.pb.svc.manager.WhenDoneAnalyzerReq', null, global);\ngoog.exportSymbol('proto.pb.svc.manager.WhenDoneAnalyzerRes', null, global);\ngoog.exportSymbol('proto.pb.svc.manager.WhenDoneScraperReq', null, global);\ngoog.exportSymbol('proto.pb.svc.manager.WhenDoneScraperRes', null, global);\ngoog.exportSymbol('proto.pb.svc.manager.WhenScraperHavingErrReq', null, global);\ngoog.exportSymbol('proto.pb.svc.manager.WhenScraperHavingErrRes', null, global);\ngoog.exportSymbol('proto.pb.svc.manager.WhenStartAnalyzerReq', null, global);\ngoog.exportSymbol('proto.pb.svc.manager.WhenStartAnalyzerRes', null, global);\ngoog.exportSymbol('proto.pb.svc.manager.WhenStartScraperReq', null, global);\ngoog.exportSymbol('proto.pb.svc.manager.WhenStartScraperRes', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\nproto.pb.svc.manager.GetJobIsReRunReq = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.pb.svc.manager.GetJobIsReRunReq, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.svc.manager.GetJobIsReRunReq.displayName = 'proto.pb.svc.manager.GetJobIsReRunReq';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.pb.svc.manager.GetJobIsReRunRes = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.pb.svc.manager.GetJobIsReRunRes, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.svc.manager.GetJobIsReRunRes.displayName = 'proto.pb.svc.manager.GetJobIsReRunRes';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.pb.svc.manager.GetArticleCountByDayReq = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.pb.svc.manager.GetArticleCountByDayReq, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.svc.manager.GetArticleCountByDayReq.displayName = 'proto.pb.svc.manager.GetArticleCountByDayReq';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.pb.svc.manager.GetArticleCountByDayRes = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.svc.manager.GetArticleCountByDayRes.repeatedFields_, null);\n};\n\ngoog.inherits(proto.pb.svc.manager.GetArticleCountByDayRes, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.svc.manager.GetArticleCountByDayRes.displayName = 'proto.pb.svc.manager.GetArticleCountByDayRes';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.pb.svc.manager.GetArticleCountByHourReq = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.pb.svc.manager.GetArticleCountByHourReq, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.svc.manager.GetArticleCountByHourReq.displayName = 'proto.pb.svc.manager.GetArticleCountByHourReq';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.pb.svc.manager.GetArticleCountByHourRes = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.svc.manager.GetArticleCountByHourRes.repeatedFields_, null);\n};\n\ngoog.inherits(proto.pb.svc.manager.GetArticleCountByHourRes, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.svc.manager.GetArticleCountByHourRes.displayName = 'proto.pb.svc.manager.GetArticleCountByHourRes';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.pb.svc.manager.CreateNewJobReq = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.pb.svc.manager.CreateNewJobReq, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.svc.manager.CreateNewJobReq.displayName = 'proto.pb.svc.manager.CreateNewJobReq';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.pb.svc.manager.CreateNewJobRes = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.pb.svc.manager.CreateNewJobRes, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.svc.manager.CreateNewJobRes.displayName = 'proto.pb.svc.manager.CreateNewJobRes';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.pb.svc.manager.ReRunJobReq = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.pb.svc.manager.ReRunJobReq, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.svc.manager.ReRunJobReq.displayName = 'proto.pb.svc.manager.ReRunJobReq';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.pb.svc.manager.ReRunJobRes = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.pb.svc.manager.ReRunJobRes, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.svc.manager.ReRunJobRes.displayName = 'proto.pb.svc.manager.ReRunJobRes';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.pb.svc.manager.GetJobStatusReq = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.pb.svc.manager.GetJobStatusReq, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.svc.manager.GetJobStatusReq.displayName = 'proto.pb.svc.manager.GetJobStatusReq';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.pb.svc.manager.GetJobStatusRes = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.pb.svc.manager.GetJobStatusRes, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.svc.manager.GetJobStatusRes.displayName = 'proto.pb.svc.manager.GetJobStatusRes';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.pb.svc.manager.StopJobReq = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.pb.svc.manager.StopJobReq, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.svc.manager.StopJobReq.displayName = 'proto.pb.svc.manager.StopJobReq';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.pb.svc.manager.StopJobRes = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.pb.svc.manager.StopJobRes, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.svc.manager.StopJobRes.displayName = 'proto.pb.svc.manager.StopJobRes';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.pb.svc.manager.WhenDoneScraperReq = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.pb.svc.manager.WhenDoneScraperReq, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.svc.manager.WhenDoneScraperReq.displayName = 'proto.pb.svc.manager.WhenDoneScraperReq';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.pb.svc.manager.WhenDoneScraperRes = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.pb.svc.manager.WhenDoneScraperRes, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.svc.manager.WhenDoneScraperRes.displayName = 'proto.pb.svc.manager.WhenDoneScraperRes';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.pb.svc.manager.WhenDoneAnalyzerReq = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.pb.svc.manager.WhenDoneAnalyzerReq, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.svc.manager.WhenDoneAnalyzerReq.displayName = 'proto.pb.svc.manager.WhenDoneAnalyzerReq';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.pb.svc.manager.WhenDoneAnalyzerRes = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.pb.svc.manager.WhenDoneAnalyzerRes, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.svc.manager.WhenDoneAnalyzerRes.displayName = 'proto.pb.svc.manager.WhenDoneAnalyzerRes';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.pb.svc.manager.UpdateJobStatusReq = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.pb.svc.manager.UpdateJobStatusReq, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.svc.manager.UpdateJobStatusReq.displayName = 'proto.pb.svc.manager.UpdateJobStatusReq';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.pb.svc.manager.UpdateJobStatusRes = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.pb.svc.manager.UpdateJobStatusRes, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.svc.manager.UpdateJobStatusRes.displayName = 'proto.pb.svc.manager.UpdateJobStatusRes';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.pb.svc.manager.GetJobListReq = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.pb.svc.manager.GetJobListReq, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.svc.manager.GetJobListReq.displayName = 'proto.pb.svc.manager.GetJobListReq';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.pb.svc.manager.GetJobListRes = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.svc.manager.GetJobListRes.repeatedFields_, null);\n};\n\ngoog.inherits(proto.pb.svc.manager.GetJobListRes, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.svc.manager.GetJobListRes.displayName = 'proto.pb.svc.manager.GetJobListRes';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.pb.svc.manager.GetWorkerListReq = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.pb.svc.manager.GetWorkerListReq, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.svc.manager.GetWorkerListReq.displayName = 'proto.pb.svc.manager.GetWorkerListReq';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.pb.svc.manager.GetWorkerListRes = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.svc.manager.GetWorkerListRes.repeatedFields_, null);\n};\n\ngoog.inherits(proto.pb.svc.manager.GetWorkerListRes, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.svc.manager.GetWorkerListRes.displayName = 'proto.pb.svc.manager.GetWorkerListRes';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.pb.svc.manager.GetArticleListReq = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.pb.svc.manager.GetArticleListReq, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.svc.manager.GetArticleListReq.displayName = 'proto.pb.svc.manager.GetArticleListReq';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.pb.svc.manager.GetArticleListRes = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.svc.manager.GetArticleListRes.repeatedFields_, null);\n};\n\ngoog.inherits(proto.pb.svc.manager.GetArticleListRes, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.svc.manager.GetArticleListRes.displayName = 'proto.pb.svc.manager.GetArticleListRes';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.pb.svc.manager.GetArticleInfoReq = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.pb.svc.manager.GetArticleInfoReq, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.svc.manager.GetArticleInfoReq.displayName = 'proto.pb.svc.manager.GetArticleInfoReq';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.pb.svc.manager.GetArticleInfoRes = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.pb.svc.manager.GetArticleInfoRes, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.svc.manager.GetArticleInfoRes.displayName = 'proto.pb.svc.manager.GetArticleInfoRes';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.pb.svc.manager.WhenStartScraperReq = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.pb.svc.manager.WhenStartScraperReq, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.svc.manager.WhenStartScraperReq.displayName = 'proto.pb.svc.manager.WhenStartScraperReq';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.pb.svc.manager.WhenStartScraperRes = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.pb.svc.manager.WhenStartScraperRes, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.svc.manager.WhenStartScraperRes.displayName = 'proto.pb.svc.manager.WhenStartScraperRes';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.pb.svc.manager.WhenStartAnalyzerReq = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.pb.svc.manager.WhenStartAnalyzerReq, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.svc.manager.WhenStartAnalyzerReq.displayName = 'proto.pb.svc.manager.WhenStartAnalyzerReq';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.pb.svc.manager.WhenStartAnalyzerRes = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.pb.svc.manager.WhenStartAnalyzerRes, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.svc.manager.WhenStartAnalyzerRes.displayName = 'proto.pb.svc.manager.WhenStartAnalyzerRes';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.pb.svc.manager.WhenScraperHavingErrReq = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.pb.svc.manager.WhenScraperHavingErrReq, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.svc.manager.WhenScraperHavingErrReq.displayName = 'proto.pb.svc.manager.WhenScraperHavingErrReq';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.pb.svc.manager.WhenScraperHavingErrRes = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.pb.svc.manager.WhenScraperHavingErrRes, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.svc.manager.WhenScraperHavingErrRes.displayName = 'proto.pb.svc.manager.WhenScraperHavingErrRes';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.pb.svc.manager.WhenAnalyzerHavingErrReq = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.pb.svc.manager.WhenAnalyzerHavingErrReq, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.svc.manager.WhenAnalyzerHavingErrReq.displayName = 'proto.pb.svc.manager.WhenAnalyzerHavingErrReq';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.pb.svc.manager.WhenAnalyzerHavingErrRes = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.pb.svc.manager.WhenAnalyzerHavingErrRes, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.svc.manager.WhenAnalyzerHavingErrRes.displayName = 'proto.pb.svc.manager.WhenAnalyzerHavingErrRes';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.pb.svc.manager.UpdateWorkerStatusReq = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.pb.svc.manager.UpdateWorkerStatusReq, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.svc.manager.UpdateWorkerStatusReq.displayName = 'proto.pb.svc.manager.UpdateWorkerStatusReq';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.pb.svc.manager.UpdateWorkerStatusRes = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.pb.svc.manager.UpdateWorkerStatusRes, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.svc.manager.UpdateWorkerStatusRes.displayName = 'proto.pb.svc.manager.UpdateWorkerStatusRes';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.svc.manager.GetJobIsReRunReq.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.svc.manager.GetJobIsReRunReq.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.svc.manager.GetJobIsReRunReq} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.svc.manager.GetJobIsReRunReq.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      id: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.svc.manager.GetJobIsReRunReq}\n */\n\n\nproto.pb.svc.manager.GetJobIsReRunReq.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.svc.manager.GetJobIsReRunReq();\n  return proto.pb.svc.manager.GetJobIsReRunReq.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.svc.manager.GetJobIsReRunReq} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.svc.manager.GetJobIsReRunReq}\n */\n\n\nproto.pb.svc.manager.GetJobIsReRunReq.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setId(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.svc.manager.GetJobIsReRunReq.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.svc.manager.GetJobIsReRunReq.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.svc.manager.GetJobIsReRunReq} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.svc.manager.GetJobIsReRunReq.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getId();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n};\n/**\n * optional string id = 1;\n * @return {string}\n */\n\n\nproto.pb.svc.manager.GetJobIsReRunReq.prototype.getId = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.svc.manager.GetJobIsReRunReq} returns this\n */\n\n\nproto.pb.svc.manager.GetJobIsReRunReq.prototype.setId = function (value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.svc.manager.GetJobIsReRunRes.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.svc.manager.GetJobIsReRunRes.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.svc.manager.GetJobIsReRunRes} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.svc.manager.GetJobIsReRunRes.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      result: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.svc.manager.GetJobIsReRunRes}\n */\n\n\nproto.pb.svc.manager.GetJobIsReRunRes.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.svc.manager.GetJobIsReRunRes();\n  return proto.pb.svc.manager.GetJobIsReRunRes.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.svc.manager.GetJobIsReRunRes} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.svc.manager.GetJobIsReRunRes}\n */\n\n\nproto.pb.svc.manager.GetJobIsReRunRes.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 2:\n        var value =\n        /** @type {boolean} */\n        reader.readBool();\n        msg.setResult(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.svc.manager.GetJobIsReRunRes.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.svc.manager.GetJobIsReRunRes.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.svc.manager.GetJobIsReRunRes} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.svc.manager.GetJobIsReRunRes.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getResult();\n\n  if (f) {\n    writer.writeBool(2, f);\n  }\n};\n/**\n * optional bool result = 2;\n * @return {boolean}\n */\n\n\nproto.pb.svc.manager.GetJobIsReRunRes.prototype.getResult = function () {\n  return (\n    /** @type {boolean} */\n    jspb.Message.getBooleanFieldWithDefault(this, 2, false)\n  );\n};\n/**\n * @param {boolean} value\n * @return {!proto.pb.svc.manager.GetJobIsReRunRes} returns this\n */\n\n\nproto.pb.svc.manager.GetJobIsReRunRes.prototype.setResult = function (value) {\n  return jspb.Message.setProto3BooleanField(this, 2, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.svc.manager.GetArticleCountByDayReq.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.svc.manager.GetArticleCountByDayReq.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.svc.manager.GetArticleCountByDayReq} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.svc.manager.GetArticleCountByDayReq.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      id: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.svc.manager.GetArticleCountByDayReq}\n */\n\n\nproto.pb.svc.manager.GetArticleCountByDayReq.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.svc.manager.GetArticleCountByDayReq();\n  return proto.pb.svc.manager.GetArticleCountByDayReq.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.svc.manager.GetArticleCountByDayReq} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.svc.manager.GetArticleCountByDayReq}\n */\n\n\nproto.pb.svc.manager.GetArticleCountByDayReq.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setId(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.svc.manager.GetArticleCountByDayReq.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.svc.manager.GetArticleCountByDayReq.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.svc.manager.GetArticleCountByDayReq} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.svc.manager.GetArticleCountByDayReq.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getId();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n};\n/**\n * optional string id = 1;\n * @return {string}\n */\n\n\nproto.pb.svc.manager.GetArticleCountByDayReq.prototype.getId = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.svc.manager.GetArticleCountByDayReq} returns this\n */\n\n\nproto.pb.svc.manager.GetArticleCountByDayReq.prototype.setId = function (value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.pb.svc.manager.GetArticleCountByDayRes.repeatedFields_ = [1];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.svc.manager.GetArticleCountByDayRes.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.svc.manager.GetArticleCountByDayRes.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.svc.manager.GetArticleCountByDayRes} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.svc.manager.GetArticleCountByDayRes.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      articlecountList: jspb.Message.toObjectList(msg.getArticlecountList(), pb_unit_article_article_pb.ArticleCount.toObject, includeInstance)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.svc.manager.GetArticleCountByDayRes}\n */\n\n\nproto.pb.svc.manager.GetArticleCountByDayRes.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.svc.manager.GetArticleCountByDayRes();\n  return proto.pb.svc.manager.GetArticleCountByDayRes.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.svc.manager.GetArticleCountByDayRes} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.svc.manager.GetArticleCountByDayRes}\n */\n\n\nproto.pb.svc.manager.GetArticleCountByDayRes.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new pb_unit_article_article_pb.ArticleCount();\n        reader.readMessage(value, pb_unit_article_article_pb.ArticleCount.deserializeBinaryFromReader);\n        msg.addArticlecount(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.svc.manager.GetArticleCountByDayRes.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.svc.manager.GetArticleCountByDayRes.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.svc.manager.GetArticleCountByDayRes} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.svc.manager.GetArticleCountByDayRes.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getArticlecountList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(1, f, pb_unit_article_article_pb.ArticleCount.serializeBinaryToWriter);\n  }\n};\n/**\n * repeated pb.unit.article.ArticleCount ArticleCount = 1;\n * @return {!Array<!proto.pb.unit.article.ArticleCount>}\n */\n\n\nproto.pb.svc.manager.GetArticleCountByDayRes.prototype.getArticlecountList = function () {\n  return (\n    /** @type{!Array<!proto.pb.unit.article.ArticleCount>} */\n    jspb.Message.getRepeatedWrapperField(this, pb_unit_article_article_pb.ArticleCount, 1)\n  );\n};\n/**\n * @param {!Array<!proto.pb.unit.article.ArticleCount>} value\n * @return {!proto.pb.svc.manager.GetArticleCountByDayRes} returns this\n*/\n\n\nproto.pb.svc.manager.GetArticleCountByDayRes.prototype.setArticlecountList = function (value) {\n  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n/**\n * @param {!proto.pb.unit.article.ArticleCount=} opt_value\n * @param {number=} opt_index\n * @return {!proto.pb.unit.article.ArticleCount}\n */\n\n\nproto.pb.svc.manager.GetArticleCountByDayRes.prototype.addArticlecount = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.unit.article.ArticleCount, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.pb.svc.manager.GetArticleCountByDayRes} returns this\n */\n\n\nproto.pb.svc.manager.GetArticleCountByDayRes.prototype.clearArticlecountList = function () {\n  return this.setArticlecountList([]);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.svc.manager.GetArticleCountByHourReq.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.svc.manager.GetArticleCountByHourReq.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.svc.manager.GetArticleCountByHourReq} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.svc.manager.GetArticleCountByHourReq.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      id: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.svc.manager.GetArticleCountByHourReq}\n */\n\n\nproto.pb.svc.manager.GetArticleCountByHourReq.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.svc.manager.GetArticleCountByHourReq();\n  return proto.pb.svc.manager.GetArticleCountByHourReq.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.svc.manager.GetArticleCountByHourReq} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.svc.manager.GetArticleCountByHourReq}\n */\n\n\nproto.pb.svc.manager.GetArticleCountByHourReq.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setId(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.svc.manager.GetArticleCountByHourReq.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.svc.manager.GetArticleCountByHourReq.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.svc.manager.GetArticleCountByHourReq} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.svc.manager.GetArticleCountByHourReq.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getId();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n};\n/**\n * optional string id = 1;\n * @return {string}\n */\n\n\nproto.pb.svc.manager.GetArticleCountByHourReq.prototype.getId = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.svc.manager.GetArticleCountByHourReq} returns this\n */\n\n\nproto.pb.svc.manager.GetArticleCountByHourReq.prototype.setId = function (value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.pb.svc.manager.GetArticleCountByHourRes.repeatedFields_ = [1];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.svc.manager.GetArticleCountByHourRes.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.svc.manager.GetArticleCountByHourRes.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.svc.manager.GetArticleCountByHourRes} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.svc.manager.GetArticleCountByHourRes.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      articlecountList: jspb.Message.toObjectList(msg.getArticlecountList(), pb_unit_article_article_pb.ArticleCount.toObject, includeInstance)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.svc.manager.GetArticleCountByHourRes}\n */\n\n\nproto.pb.svc.manager.GetArticleCountByHourRes.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.svc.manager.GetArticleCountByHourRes();\n  return proto.pb.svc.manager.GetArticleCountByHourRes.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.svc.manager.GetArticleCountByHourRes} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.svc.manager.GetArticleCountByHourRes}\n */\n\n\nproto.pb.svc.manager.GetArticleCountByHourRes.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new pb_unit_article_article_pb.ArticleCount();\n        reader.readMessage(value, pb_unit_article_article_pb.ArticleCount.deserializeBinaryFromReader);\n        msg.addArticlecount(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.svc.manager.GetArticleCountByHourRes.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.svc.manager.GetArticleCountByHourRes.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.svc.manager.GetArticleCountByHourRes} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.svc.manager.GetArticleCountByHourRes.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getArticlecountList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(1, f, pb_unit_article_article_pb.ArticleCount.serializeBinaryToWriter);\n  }\n};\n/**\n * repeated pb.unit.article.ArticleCount ArticleCount = 1;\n * @return {!Array<!proto.pb.unit.article.ArticleCount>}\n */\n\n\nproto.pb.svc.manager.GetArticleCountByHourRes.prototype.getArticlecountList = function () {\n  return (\n    /** @type{!Array<!proto.pb.unit.article.ArticleCount>} */\n    jspb.Message.getRepeatedWrapperField(this, pb_unit_article_article_pb.ArticleCount, 1)\n  );\n};\n/**\n * @param {!Array<!proto.pb.unit.article.ArticleCount>} value\n * @return {!proto.pb.svc.manager.GetArticleCountByHourRes} returns this\n*/\n\n\nproto.pb.svc.manager.GetArticleCountByHourRes.prototype.setArticlecountList = function (value) {\n  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n/**\n * @param {!proto.pb.unit.article.ArticleCount=} opt_value\n * @param {number=} opt_index\n * @return {!proto.pb.unit.article.ArticleCount}\n */\n\n\nproto.pb.svc.manager.GetArticleCountByHourRes.prototype.addArticlecount = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.unit.article.ArticleCount, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.pb.svc.manager.GetArticleCountByHourRes} returns this\n */\n\n\nproto.pb.svc.manager.GetArticleCountByHourRes.prototype.clearArticlecountList = function () {\n  return this.setArticlecountList([]);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.svc.manager.CreateNewJobReq.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.svc.manager.CreateNewJobReq.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.svc.manager.CreateNewJobReq} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.svc.manager.CreateNewJobReq.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      keyword: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n      owner: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n      accesscode: jspb.Message.getFieldWithDefault(msg, 3, \"\")\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.svc.manager.CreateNewJobReq}\n */\n\n\nproto.pb.svc.manager.CreateNewJobReq.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.svc.manager.CreateNewJobReq();\n  return proto.pb.svc.manager.CreateNewJobReq.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.svc.manager.CreateNewJobReq} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.svc.manager.CreateNewJobReq}\n */\n\n\nproto.pb.svc.manager.CreateNewJobReq.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setKeyword(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setOwner(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setAccesscode(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.svc.manager.CreateNewJobReq.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.svc.manager.CreateNewJobReq.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.svc.manager.CreateNewJobReq} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.svc.manager.CreateNewJobReq.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getKeyword();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n\n  f = message.getOwner();\n\n  if (f.length > 0) {\n    writer.writeString(2, f);\n  }\n\n  f = message.getAccesscode();\n\n  if (f.length > 0) {\n    writer.writeString(3, f);\n  }\n};\n/**\n * optional string keyword = 1;\n * @return {string}\n */\n\n\nproto.pb.svc.manager.CreateNewJobReq.prototype.getKeyword = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.svc.manager.CreateNewJobReq} returns this\n */\n\n\nproto.pb.svc.manager.CreateNewJobReq.prototype.setKeyword = function (value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n/**\n * optional string owner = 2;\n * @return {string}\n */\n\n\nproto.pb.svc.manager.CreateNewJobReq.prototype.getOwner = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 2, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.svc.manager.CreateNewJobReq} returns this\n */\n\n\nproto.pb.svc.manager.CreateNewJobReq.prototype.setOwner = function (value) {\n  return jspb.Message.setProto3StringField(this, 2, value);\n};\n/**\n * optional string accessCode = 3;\n * @return {string}\n */\n\n\nproto.pb.svc.manager.CreateNewJobReq.prototype.getAccesscode = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 3, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.svc.manager.CreateNewJobReq} returns this\n */\n\n\nproto.pb.svc.manager.CreateNewJobReq.prototype.setAccesscode = function (value) {\n  return jspb.Message.setProto3StringField(this, 3, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.svc.manager.CreateNewJobRes.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.svc.manager.CreateNewJobRes.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.svc.manager.CreateNewJobRes} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.svc.manager.CreateNewJobRes.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      msg: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.svc.manager.CreateNewJobRes}\n */\n\n\nproto.pb.svc.manager.CreateNewJobRes.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.svc.manager.CreateNewJobRes();\n  return proto.pb.svc.manager.CreateNewJobRes.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.svc.manager.CreateNewJobRes} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.svc.manager.CreateNewJobRes}\n */\n\n\nproto.pb.svc.manager.CreateNewJobRes.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setMsg(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.svc.manager.CreateNewJobRes.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.svc.manager.CreateNewJobRes.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.svc.manager.CreateNewJobRes} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.svc.manager.CreateNewJobRes.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getMsg();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n};\n/**\n * optional string msg = 1;\n * @return {string}\n */\n\n\nproto.pb.svc.manager.CreateNewJobRes.prototype.getMsg = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.svc.manager.CreateNewJobRes} returns this\n */\n\n\nproto.pb.svc.manager.CreateNewJobRes.prototype.setMsg = function (value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.svc.manager.ReRunJobReq.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.svc.manager.ReRunJobReq.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.svc.manager.ReRunJobReq} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.svc.manager.ReRunJobReq.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      id: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n      schedule: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),\n      accesscode: jspb.Message.getFieldWithDefault(msg, 3, \"\")\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.svc.manager.ReRunJobReq}\n */\n\n\nproto.pb.svc.manager.ReRunJobReq.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.svc.manager.ReRunJobReq();\n  return proto.pb.svc.manager.ReRunJobReq.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.svc.manager.ReRunJobReq} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.svc.manager.ReRunJobReq}\n */\n\n\nproto.pb.svc.manager.ReRunJobReq.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setId(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {boolean} */\n        reader.readBool();\n        msg.setSchedule(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setAccesscode(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.svc.manager.ReRunJobReq.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.svc.manager.ReRunJobReq.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.svc.manager.ReRunJobReq} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.svc.manager.ReRunJobReq.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getId();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n\n  f = message.getSchedule();\n\n  if (f) {\n    writer.writeBool(2, f);\n  }\n\n  f = message.getAccesscode();\n\n  if (f.length > 0) {\n    writer.writeString(3, f);\n  }\n};\n/**\n * optional string id = 1;\n * @return {string}\n */\n\n\nproto.pb.svc.manager.ReRunJobReq.prototype.getId = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.svc.manager.ReRunJobReq} returns this\n */\n\n\nproto.pb.svc.manager.ReRunJobReq.prototype.setId = function (value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n/**\n * optional bool schedule = 2;\n * @return {boolean}\n */\n\n\nproto.pb.svc.manager.ReRunJobReq.prototype.getSchedule = function () {\n  return (\n    /** @type {boolean} */\n    jspb.Message.getBooleanFieldWithDefault(this, 2, false)\n  );\n};\n/**\n * @param {boolean} value\n * @return {!proto.pb.svc.manager.ReRunJobReq} returns this\n */\n\n\nproto.pb.svc.manager.ReRunJobReq.prototype.setSchedule = function (value) {\n  return jspb.Message.setProto3BooleanField(this, 2, value);\n};\n/**\n * optional string accessCode = 3;\n * @return {string}\n */\n\n\nproto.pb.svc.manager.ReRunJobReq.prototype.getAccesscode = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 3, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.svc.manager.ReRunJobReq} returns this\n */\n\n\nproto.pb.svc.manager.ReRunJobReq.prototype.setAccesscode = function (value) {\n  return jspb.Message.setProto3StringField(this, 3, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.svc.manager.ReRunJobRes.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.svc.manager.ReRunJobRes.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.svc.manager.ReRunJobRes} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.svc.manager.ReRunJobRes.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      msg: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.svc.manager.ReRunJobRes}\n */\n\n\nproto.pb.svc.manager.ReRunJobRes.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.svc.manager.ReRunJobRes();\n  return proto.pb.svc.manager.ReRunJobRes.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.svc.manager.ReRunJobRes} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.svc.manager.ReRunJobRes}\n */\n\n\nproto.pb.svc.manager.ReRunJobRes.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setMsg(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.svc.manager.ReRunJobRes.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.svc.manager.ReRunJobRes.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.svc.manager.ReRunJobRes} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.svc.manager.ReRunJobRes.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getMsg();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n};\n/**\n * optional string msg = 1;\n * @return {string}\n */\n\n\nproto.pb.svc.manager.ReRunJobRes.prototype.getMsg = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.svc.manager.ReRunJobRes} returns this\n */\n\n\nproto.pb.svc.manager.ReRunJobRes.prototype.setMsg = function (value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.svc.manager.GetJobStatusReq.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.svc.manager.GetJobStatusReq.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.svc.manager.GetJobStatusReq} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.svc.manager.GetJobStatusReq.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      id: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n      owner: jspb.Message.getFieldWithDefault(msg, 2, \"\")\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.svc.manager.GetJobStatusReq}\n */\n\n\nproto.pb.svc.manager.GetJobStatusReq.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.svc.manager.GetJobStatusReq();\n  return proto.pb.svc.manager.GetJobStatusReq.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.svc.manager.GetJobStatusReq} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.svc.manager.GetJobStatusReq}\n */\n\n\nproto.pb.svc.manager.GetJobStatusReq.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setId(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setOwner(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.svc.manager.GetJobStatusReq.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.svc.manager.GetJobStatusReq.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.svc.manager.GetJobStatusReq} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.svc.manager.GetJobStatusReq.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getId();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n\n  f = message.getOwner();\n\n  if (f.length > 0) {\n    writer.writeString(2, f);\n  }\n};\n/**\n * optional string id = 1;\n * @return {string}\n */\n\n\nproto.pb.svc.manager.GetJobStatusReq.prototype.getId = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.svc.manager.GetJobStatusReq} returns this\n */\n\n\nproto.pb.svc.manager.GetJobStatusReq.prototype.setId = function (value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n/**\n * optional string owner = 2;\n * @return {string}\n */\n\n\nproto.pb.svc.manager.GetJobStatusReq.prototype.getOwner = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 2, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.svc.manager.GetJobStatusReq} returns this\n */\n\n\nproto.pb.svc.manager.GetJobStatusReq.prototype.setOwner = function (value) {\n  return jspb.Message.setProto3StringField(this, 2, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.svc.manager.GetJobStatusRes.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.svc.manager.GetJobStatusRes.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.svc.manager.GetJobStatusRes} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.svc.manager.GetJobStatusRes.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      status: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.svc.manager.GetJobStatusRes}\n */\n\n\nproto.pb.svc.manager.GetJobStatusRes.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.svc.manager.GetJobStatusRes();\n  return proto.pb.svc.manager.GetJobStatusRes.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.svc.manager.GetJobStatusRes} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.svc.manager.GetJobStatusRes}\n */\n\n\nproto.pb.svc.manager.GetJobStatusRes.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setStatus(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.svc.manager.GetJobStatusRes.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.svc.manager.GetJobStatusRes.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.svc.manager.GetJobStatusRes} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.svc.manager.GetJobStatusRes.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getStatus();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n};\n/**\n * optional string status = 1;\n * @return {string}\n */\n\n\nproto.pb.svc.manager.GetJobStatusRes.prototype.getStatus = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.svc.manager.GetJobStatusRes} returns this\n */\n\n\nproto.pb.svc.manager.GetJobStatusRes.prototype.setStatus = function (value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.svc.manager.StopJobReq.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.svc.manager.StopJobReq.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.svc.manager.StopJobReq} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.svc.manager.StopJobReq.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      id: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.svc.manager.StopJobReq}\n */\n\n\nproto.pb.svc.manager.StopJobReq.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.svc.manager.StopJobReq();\n  return proto.pb.svc.manager.StopJobReq.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.svc.manager.StopJobReq} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.svc.manager.StopJobReq}\n */\n\n\nproto.pb.svc.manager.StopJobReq.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setId(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.svc.manager.StopJobReq.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.svc.manager.StopJobReq.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.svc.manager.StopJobReq} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.svc.manager.StopJobReq.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getId();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n};\n/**\n * optional string id = 1;\n * @return {string}\n */\n\n\nproto.pb.svc.manager.StopJobReq.prototype.getId = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.svc.manager.StopJobReq} returns this\n */\n\n\nproto.pb.svc.manager.StopJobReq.prototype.setId = function (value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.svc.manager.StopJobRes.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.svc.manager.StopJobRes.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.svc.manager.StopJobRes} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.svc.manager.StopJobRes.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      result: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.svc.manager.StopJobRes}\n */\n\n\nproto.pb.svc.manager.StopJobRes.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.svc.manager.StopJobRes();\n  return proto.pb.svc.manager.StopJobRes.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.svc.manager.StopJobRes} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.svc.manager.StopJobRes}\n */\n\n\nproto.pb.svc.manager.StopJobRes.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setResult(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.svc.manager.StopJobRes.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.svc.manager.StopJobRes.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.svc.manager.StopJobRes} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.svc.manager.StopJobRes.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getResult();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n};\n/**\n * optional string result = 1;\n * @return {string}\n */\n\n\nproto.pb.svc.manager.StopJobRes.prototype.getResult = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.svc.manager.StopJobRes} returns this\n */\n\n\nproto.pb.svc.manager.StopJobRes.prototype.setResult = function (value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.svc.manager.WhenDoneScraperReq.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.svc.manager.WhenDoneScraperReq.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.svc.manager.WhenDoneScraperReq} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.svc.manager.WhenDoneScraperReq.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      id: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.svc.manager.WhenDoneScraperReq}\n */\n\n\nproto.pb.svc.manager.WhenDoneScraperReq.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.svc.manager.WhenDoneScraperReq();\n  return proto.pb.svc.manager.WhenDoneScraperReq.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.svc.manager.WhenDoneScraperReq} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.svc.manager.WhenDoneScraperReq}\n */\n\n\nproto.pb.svc.manager.WhenDoneScraperReq.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setId(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.svc.manager.WhenDoneScraperReq.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.svc.manager.WhenDoneScraperReq.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.svc.manager.WhenDoneScraperReq} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.svc.manager.WhenDoneScraperReq.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getId();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n};\n/**\n * optional string id = 1;\n * @return {string}\n */\n\n\nproto.pb.svc.manager.WhenDoneScraperReq.prototype.getId = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.svc.manager.WhenDoneScraperReq} returns this\n */\n\n\nproto.pb.svc.manager.WhenDoneScraperReq.prototype.setId = function (value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.svc.manager.WhenDoneScraperRes.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.svc.manager.WhenDoneScraperRes.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.svc.manager.WhenDoneScraperRes} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.svc.manager.WhenDoneScraperRes.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      result: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.svc.manager.WhenDoneScraperRes}\n */\n\n\nproto.pb.svc.manager.WhenDoneScraperRes.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.svc.manager.WhenDoneScraperRes();\n  return proto.pb.svc.manager.WhenDoneScraperRes.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.svc.manager.WhenDoneScraperRes} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.svc.manager.WhenDoneScraperRes}\n */\n\n\nproto.pb.svc.manager.WhenDoneScraperRes.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setResult(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.svc.manager.WhenDoneScraperRes.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.svc.manager.WhenDoneScraperRes.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.svc.manager.WhenDoneScraperRes} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.svc.manager.WhenDoneScraperRes.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getResult();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n};\n/**\n * optional string result = 1;\n * @return {string}\n */\n\n\nproto.pb.svc.manager.WhenDoneScraperRes.prototype.getResult = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.svc.manager.WhenDoneScraperRes} returns this\n */\n\n\nproto.pb.svc.manager.WhenDoneScraperRes.prototype.setResult = function (value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.svc.manager.WhenDoneAnalyzerReq.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.svc.manager.WhenDoneAnalyzerReq.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.svc.manager.WhenDoneAnalyzerReq} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.svc.manager.WhenDoneAnalyzerReq.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      id: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.svc.manager.WhenDoneAnalyzerReq}\n */\n\n\nproto.pb.svc.manager.WhenDoneAnalyzerReq.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.svc.manager.WhenDoneAnalyzerReq();\n  return proto.pb.svc.manager.WhenDoneAnalyzerReq.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.svc.manager.WhenDoneAnalyzerReq} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.svc.manager.WhenDoneAnalyzerReq}\n */\n\n\nproto.pb.svc.manager.WhenDoneAnalyzerReq.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setId(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.svc.manager.WhenDoneAnalyzerReq.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.svc.manager.WhenDoneAnalyzerReq.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.svc.manager.WhenDoneAnalyzerReq} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.svc.manager.WhenDoneAnalyzerReq.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getId();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n};\n/**\n * optional string id = 1;\n * @return {string}\n */\n\n\nproto.pb.svc.manager.WhenDoneAnalyzerReq.prototype.getId = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.svc.manager.WhenDoneAnalyzerReq} returns this\n */\n\n\nproto.pb.svc.manager.WhenDoneAnalyzerReq.prototype.setId = function (value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.svc.manager.WhenDoneAnalyzerRes.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.svc.manager.WhenDoneAnalyzerRes.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.svc.manager.WhenDoneAnalyzerRes} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.svc.manager.WhenDoneAnalyzerRes.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      result: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.svc.manager.WhenDoneAnalyzerRes}\n */\n\n\nproto.pb.svc.manager.WhenDoneAnalyzerRes.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.svc.manager.WhenDoneAnalyzerRes();\n  return proto.pb.svc.manager.WhenDoneAnalyzerRes.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.svc.manager.WhenDoneAnalyzerRes} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.svc.manager.WhenDoneAnalyzerRes}\n */\n\n\nproto.pb.svc.manager.WhenDoneAnalyzerRes.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setResult(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.svc.manager.WhenDoneAnalyzerRes.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.svc.manager.WhenDoneAnalyzerRes.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.svc.manager.WhenDoneAnalyzerRes} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.svc.manager.WhenDoneAnalyzerRes.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getResult();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n};\n/**\n * optional string result = 1;\n * @return {string}\n */\n\n\nproto.pb.svc.manager.WhenDoneAnalyzerRes.prototype.getResult = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.svc.manager.WhenDoneAnalyzerRes} returns this\n */\n\n\nproto.pb.svc.manager.WhenDoneAnalyzerRes.prototype.setResult = function (value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.svc.manager.UpdateJobStatusReq.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.svc.manager.UpdateJobStatusReq.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.svc.manager.UpdateJobStatusReq} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.svc.manager.UpdateJobStatusReq.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      id: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n      status: jspb.Message.getFieldWithDefault(msg, 2, \"\")\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.svc.manager.UpdateJobStatusReq}\n */\n\n\nproto.pb.svc.manager.UpdateJobStatusReq.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.svc.manager.UpdateJobStatusReq();\n  return proto.pb.svc.manager.UpdateJobStatusReq.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.svc.manager.UpdateJobStatusReq} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.svc.manager.UpdateJobStatusReq}\n */\n\n\nproto.pb.svc.manager.UpdateJobStatusReq.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setId(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setStatus(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.svc.manager.UpdateJobStatusReq.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.svc.manager.UpdateJobStatusReq.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.svc.manager.UpdateJobStatusReq} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.svc.manager.UpdateJobStatusReq.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getId();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n\n  f = message.getStatus();\n\n  if (f.length > 0) {\n    writer.writeString(2, f);\n  }\n};\n/**\n * optional string id = 1;\n * @return {string}\n */\n\n\nproto.pb.svc.manager.UpdateJobStatusReq.prototype.getId = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.svc.manager.UpdateJobStatusReq} returns this\n */\n\n\nproto.pb.svc.manager.UpdateJobStatusReq.prototype.setId = function (value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n/**\n * optional string status = 2;\n * @return {string}\n */\n\n\nproto.pb.svc.manager.UpdateJobStatusReq.prototype.getStatus = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 2, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.svc.manager.UpdateJobStatusReq} returns this\n */\n\n\nproto.pb.svc.manager.UpdateJobStatusReq.prototype.setStatus = function (value) {\n  return jspb.Message.setProto3StringField(this, 2, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.svc.manager.UpdateJobStatusRes.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.svc.manager.UpdateJobStatusRes.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.svc.manager.UpdateJobStatusRes} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.svc.manager.UpdateJobStatusRes.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      result: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.svc.manager.UpdateJobStatusRes}\n */\n\n\nproto.pb.svc.manager.UpdateJobStatusRes.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.svc.manager.UpdateJobStatusRes();\n  return proto.pb.svc.manager.UpdateJobStatusRes.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.svc.manager.UpdateJobStatusRes} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.svc.manager.UpdateJobStatusRes}\n */\n\n\nproto.pb.svc.manager.UpdateJobStatusRes.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setResult(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.svc.manager.UpdateJobStatusRes.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.svc.manager.UpdateJobStatusRes.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.svc.manager.UpdateJobStatusRes} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.svc.manager.UpdateJobStatusRes.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getResult();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n};\n/**\n * optional string result = 1;\n * @return {string}\n */\n\n\nproto.pb.svc.manager.UpdateJobStatusRes.prototype.getResult = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.svc.manager.UpdateJobStatusRes} returns this\n */\n\n\nproto.pb.svc.manager.UpdateJobStatusRes.prototype.setResult = function (value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.svc.manager.GetJobListReq.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.svc.manager.GetJobListReq.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.svc.manager.GetJobListReq} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.svc.manager.GetJobListReq.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {};\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.svc.manager.GetJobListReq}\n */\n\n\nproto.pb.svc.manager.GetJobListReq.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.svc.manager.GetJobListReq();\n  return proto.pb.svc.manager.GetJobListReq.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.svc.manager.GetJobListReq} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.svc.manager.GetJobListReq}\n */\n\n\nproto.pb.svc.manager.GetJobListReq.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.svc.manager.GetJobListReq.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.svc.manager.GetJobListReq.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.svc.manager.GetJobListReq} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.svc.manager.GetJobListReq.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n};\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.pb.svc.manager.GetJobListRes.repeatedFields_ = [1];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.svc.manager.GetJobListRes.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.svc.manager.GetJobListRes.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.svc.manager.GetJobListRes} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.svc.manager.GetJobListRes.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      jobList: jspb.Message.toObjectList(msg.getJobList(), pb_unit_job_job_pb.Job.toObject, includeInstance)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.svc.manager.GetJobListRes}\n */\n\n\nproto.pb.svc.manager.GetJobListRes.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.svc.manager.GetJobListRes();\n  return proto.pb.svc.manager.GetJobListRes.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.svc.manager.GetJobListRes} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.svc.manager.GetJobListRes}\n */\n\n\nproto.pb.svc.manager.GetJobListRes.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new pb_unit_job_job_pb.Job();\n        reader.readMessage(value, pb_unit_job_job_pb.Job.deserializeBinaryFromReader);\n        msg.addJob(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.svc.manager.GetJobListRes.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.svc.manager.GetJobListRes.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.svc.manager.GetJobListRes} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.svc.manager.GetJobListRes.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getJobList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(1, f, pb_unit_job_job_pb.Job.serializeBinaryToWriter);\n  }\n};\n/**\n * repeated pb.unit.job.Job Job = 1;\n * @return {!Array<!proto.pb.unit.job.Job>}\n */\n\n\nproto.pb.svc.manager.GetJobListRes.prototype.getJobList = function () {\n  return (\n    /** @type{!Array<!proto.pb.unit.job.Job>} */\n    jspb.Message.getRepeatedWrapperField(this, pb_unit_job_job_pb.Job, 1)\n  );\n};\n/**\n * @param {!Array<!proto.pb.unit.job.Job>} value\n * @return {!proto.pb.svc.manager.GetJobListRes} returns this\n*/\n\n\nproto.pb.svc.manager.GetJobListRes.prototype.setJobList = function (value) {\n  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n/**\n * @param {!proto.pb.unit.job.Job=} opt_value\n * @param {number=} opt_index\n * @return {!proto.pb.unit.job.Job}\n */\n\n\nproto.pb.svc.manager.GetJobListRes.prototype.addJob = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.unit.job.Job, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.pb.svc.manager.GetJobListRes} returns this\n */\n\n\nproto.pb.svc.manager.GetJobListRes.prototype.clearJobList = function () {\n  return this.setJobList([]);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.svc.manager.GetWorkerListReq.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.svc.manager.GetWorkerListReq.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.svc.manager.GetWorkerListReq} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.svc.manager.GetWorkerListReq.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      id: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.svc.manager.GetWorkerListReq}\n */\n\n\nproto.pb.svc.manager.GetWorkerListReq.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.svc.manager.GetWorkerListReq();\n  return proto.pb.svc.manager.GetWorkerListReq.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.svc.manager.GetWorkerListReq} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.svc.manager.GetWorkerListReq}\n */\n\n\nproto.pb.svc.manager.GetWorkerListReq.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setId(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.svc.manager.GetWorkerListReq.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.svc.manager.GetWorkerListReq.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.svc.manager.GetWorkerListReq} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.svc.manager.GetWorkerListReq.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getId();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n};\n/**\n * optional string id = 1;\n * @return {string}\n */\n\n\nproto.pb.svc.manager.GetWorkerListReq.prototype.getId = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.svc.manager.GetWorkerListReq} returns this\n */\n\n\nproto.pb.svc.manager.GetWorkerListReq.prototype.setId = function (value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.pb.svc.manager.GetWorkerListRes.repeatedFields_ = [1];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.svc.manager.GetWorkerListRes.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.svc.manager.GetWorkerListRes.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.svc.manager.GetWorkerListRes} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.svc.manager.GetWorkerListRes.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      workerList: jspb.Message.toObjectList(msg.getWorkerList(), pb_unit_worker_worker_pb.Worker.toObject, includeInstance)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.svc.manager.GetWorkerListRes}\n */\n\n\nproto.pb.svc.manager.GetWorkerListRes.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.svc.manager.GetWorkerListRes();\n  return proto.pb.svc.manager.GetWorkerListRes.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.svc.manager.GetWorkerListRes} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.svc.manager.GetWorkerListRes}\n */\n\n\nproto.pb.svc.manager.GetWorkerListRes.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new pb_unit_worker_worker_pb.Worker();\n        reader.readMessage(value, pb_unit_worker_worker_pb.Worker.deserializeBinaryFromReader);\n        msg.addWorker(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.svc.manager.GetWorkerListRes.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.svc.manager.GetWorkerListRes.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.svc.manager.GetWorkerListRes} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.svc.manager.GetWorkerListRes.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getWorkerList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(1, f, pb_unit_worker_worker_pb.Worker.serializeBinaryToWriter);\n  }\n};\n/**\n * repeated pb.unit.worker.Worker Worker = 1;\n * @return {!Array<!proto.pb.unit.worker.Worker>}\n */\n\n\nproto.pb.svc.manager.GetWorkerListRes.prototype.getWorkerList = function () {\n  return (\n    /** @type{!Array<!proto.pb.unit.worker.Worker>} */\n    jspb.Message.getRepeatedWrapperField(this, pb_unit_worker_worker_pb.Worker, 1)\n  );\n};\n/**\n * @param {!Array<!proto.pb.unit.worker.Worker>} value\n * @return {!proto.pb.svc.manager.GetWorkerListRes} returns this\n*/\n\n\nproto.pb.svc.manager.GetWorkerListRes.prototype.setWorkerList = function (value) {\n  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n/**\n * @param {!proto.pb.unit.worker.Worker=} opt_value\n * @param {number=} opt_index\n * @return {!proto.pb.unit.worker.Worker}\n */\n\n\nproto.pb.svc.manager.GetWorkerListRes.prototype.addWorker = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.unit.worker.Worker, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.pb.svc.manager.GetWorkerListRes} returns this\n */\n\n\nproto.pb.svc.manager.GetWorkerListRes.prototype.clearWorkerList = function () {\n  return this.setWorkerList([]);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.svc.manager.GetArticleListReq.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.svc.manager.GetArticleListReq.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.svc.manager.GetArticleListReq} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.svc.manager.GetArticleListReq.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      id: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n      page: jspb.Message.getFieldWithDefault(msg, 2, 0)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.svc.manager.GetArticleListReq}\n */\n\n\nproto.pb.svc.manager.GetArticleListReq.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.svc.manager.GetArticleListReq();\n  return proto.pb.svc.manager.GetArticleListReq.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.svc.manager.GetArticleListReq} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.svc.manager.GetArticleListReq}\n */\n\n\nproto.pb.svc.manager.GetArticleListReq.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setId(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {number} */\n        reader.readInt32();\n        msg.setPage(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.svc.manager.GetArticleListReq.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.svc.manager.GetArticleListReq.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.svc.manager.GetArticleListReq} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.svc.manager.GetArticleListReq.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getId();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n\n  f = message.getPage();\n\n  if (f !== 0) {\n    writer.writeInt32(2, f);\n  }\n};\n/**\n * optional string id = 1;\n * @return {string}\n */\n\n\nproto.pb.svc.manager.GetArticleListReq.prototype.getId = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.svc.manager.GetArticleListReq} returns this\n */\n\n\nproto.pb.svc.manager.GetArticleListReq.prototype.setId = function (value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n/**\n * optional int32 page = 2;\n * @return {number}\n */\n\n\nproto.pb.svc.manager.GetArticleListReq.prototype.getPage = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 2, 0)\n  );\n};\n/**\n * @param {number} value\n * @return {!proto.pb.svc.manager.GetArticleListReq} returns this\n */\n\n\nproto.pb.svc.manager.GetArticleListReq.prototype.setPage = function (value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.pb.svc.manager.GetArticleListRes.repeatedFields_ = [1];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.svc.manager.GetArticleListRes.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.svc.manager.GetArticleListRes.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.svc.manager.GetArticleListRes} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.svc.manager.GetArticleListRes.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      articleList: jspb.Message.toObjectList(msg.getArticleList(), pb_unit_article_article_pb.Article.toObject, includeInstance)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.svc.manager.GetArticleListRes}\n */\n\n\nproto.pb.svc.manager.GetArticleListRes.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.svc.manager.GetArticleListRes();\n  return proto.pb.svc.manager.GetArticleListRes.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.svc.manager.GetArticleListRes} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.svc.manager.GetArticleListRes}\n */\n\n\nproto.pb.svc.manager.GetArticleListRes.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new pb_unit_article_article_pb.Article();\n        reader.readMessage(value, pb_unit_article_article_pb.Article.deserializeBinaryFromReader);\n        msg.addArticle(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.svc.manager.GetArticleListRes.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.svc.manager.GetArticleListRes.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.svc.manager.GetArticleListRes} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.svc.manager.GetArticleListRes.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getArticleList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(1, f, pb_unit_article_article_pb.Article.serializeBinaryToWriter);\n  }\n};\n/**\n * repeated pb.unit.article.Article Article = 1;\n * @return {!Array<!proto.pb.unit.article.Article>}\n */\n\n\nproto.pb.svc.manager.GetArticleListRes.prototype.getArticleList = function () {\n  return (\n    /** @type{!Array<!proto.pb.unit.article.Article>} */\n    jspb.Message.getRepeatedWrapperField(this, pb_unit_article_article_pb.Article, 1)\n  );\n};\n/**\n * @param {!Array<!proto.pb.unit.article.Article>} value\n * @return {!proto.pb.svc.manager.GetArticleListRes} returns this\n*/\n\n\nproto.pb.svc.manager.GetArticleListRes.prototype.setArticleList = function (value) {\n  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n/**\n * @param {!proto.pb.unit.article.Article=} opt_value\n * @param {number=} opt_index\n * @return {!proto.pb.unit.article.Article}\n */\n\n\nproto.pb.svc.manager.GetArticleListRes.prototype.addArticle = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.unit.article.Article, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.pb.svc.manager.GetArticleListRes} returns this\n */\n\n\nproto.pb.svc.manager.GetArticleListRes.prototype.clearArticleList = function () {\n  return this.setArticleList([]);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.svc.manager.GetArticleInfoReq.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.svc.manager.GetArticleInfoReq.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.svc.manager.GetArticleInfoReq} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.svc.manager.GetArticleInfoReq.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      id: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.svc.manager.GetArticleInfoReq}\n */\n\n\nproto.pb.svc.manager.GetArticleInfoReq.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.svc.manager.GetArticleInfoReq();\n  return proto.pb.svc.manager.GetArticleInfoReq.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.svc.manager.GetArticleInfoReq} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.svc.manager.GetArticleInfoReq}\n */\n\n\nproto.pb.svc.manager.GetArticleInfoReq.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setId(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.svc.manager.GetArticleInfoReq.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.svc.manager.GetArticleInfoReq.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.svc.manager.GetArticleInfoReq} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.svc.manager.GetArticleInfoReq.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getId();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n};\n/**\n * optional string id = 1;\n * @return {string}\n */\n\n\nproto.pb.svc.manager.GetArticleInfoReq.prototype.getId = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.svc.manager.GetArticleInfoReq} returns this\n */\n\n\nproto.pb.svc.manager.GetArticleInfoReq.prototype.setId = function (value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.svc.manager.GetArticleInfoRes.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.svc.manager.GetArticleInfoRes.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.svc.manager.GetArticleInfoRes} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.svc.manager.GetArticleInfoRes.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      totalcount: jspb.Message.getFieldWithDefault(msg, 1, 0),\n      pagecount: jspb.Message.getFieldWithDefault(msg, 2, 0)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.svc.manager.GetArticleInfoRes}\n */\n\n\nproto.pb.svc.manager.GetArticleInfoRes.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.svc.manager.GetArticleInfoRes();\n  return proto.pb.svc.manager.GetArticleInfoRes.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.svc.manager.GetArticleInfoRes} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.svc.manager.GetArticleInfoRes}\n */\n\n\nproto.pb.svc.manager.GetArticleInfoRes.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {number} */\n        reader.readInt32();\n        msg.setTotalcount(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {number} */\n        reader.readInt32();\n        msg.setPagecount(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.svc.manager.GetArticleInfoRes.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.svc.manager.GetArticleInfoRes.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.svc.manager.GetArticleInfoRes} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.svc.manager.GetArticleInfoRes.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getTotalcount();\n\n  if (f !== 0) {\n    writer.writeInt32(1, f);\n  }\n\n  f = message.getPagecount();\n\n  if (f !== 0) {\n    writer.writeInt32(2, f);\n  }\n};\n/**\n * optional int32 totalCount = 1;\n * @return {number}\n */\n\n\nproto.pb.svc.manager.GetArticleInfoRes.prototype.getTotalcount = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 1, 0)\n  );\n};\n/**\n * @param {number} value\n * @return {!proto.pb.svc.manager.GetArticleInfoRes} returns this\n */\n\n\nproto.pb.svc.manager.GetArticleInfoRes.prototype.setTotalcount = function (value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n/**\n * optional int32 pageCount = 2;\n * @return {number}\n */\n\n\nproto.pb.svc.manager.GetArticleInfoRes.prototype.getPagecount = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 2, 0)\n  );\n};\n/**\n * @param {number} value\n * @return {!proto.pb.svc.manager.GetArticleInfoRes} returns this\n */\n\n\nproto.pb.svc.manager.GetArticleInfoRes.prototype.setPagecount = function (value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.svc.manager.WhenStartScraperReq.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.svc.manager.WhenStartScraperReq.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.svc.manager.WhenStartScraperReq} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.svc.manager.WhenStartScraperReq.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      id: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.svc.manager.WhenStartScraperReq}\n */\n\n\nproto.pb.svc.manager.WhenStartScraperReq.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.svc.manager.WhenStartScraperReq();\n  return proto.pb.svc.manager.WhenStartScraperReq.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.svc.manager.WhenStartScraperReq} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.svc.manager.WhenStartScraperReq}\n */\n\n\nproto.pb.svc.manager.WhenStartScraperReq.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setId(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.svc.manager.WhenStartScraperReq.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.svc.manager.WhenStartScraperReq.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.svc.manager.WhenStartScraperReq} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.svc.manager.WhenStartScraperReq.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getId();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n};\n/**\n * optional string id = 1;\n * @return {string}\n */\n\n\nproto.pb.svc.manager.WhenStartScraperReq.prototype.getId = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.svc.manager.WhenStartScraperReq} returns this\n */\n\n\nproto.pb.svc.manager.WhenStartScraperReq.prototype.setId = function (value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.svc.manager.WhenStartScraperRes.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.svc.manager.WhenStartScraperRes.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.svc.manager.WhenStartScraperRes} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.svc.manager.WhenStartScraperRes.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      result: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.svc.manager.WhenStartScraperRes}\n */\n\n\nproto.pb.svc.manager.WhenStartScraperRes.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.svc.manager.WhenStartScraperRes();\n  return proto.pb.svc.manager.WhenStartScraperRes.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.svc.manager.WhenStartScraperRes} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.svc.manager.WhenStartScraperRes}\n */\n\n\nproto.pb.svc.manager.WhenStartScraperRes.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setResult(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.svc.manager.WhenStartScraperRes.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.svc.manager.WhenStartScraperRes.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.svc.manager.WhenStartScraperRes} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.svc.manager.WhenStartScraperRes.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getResult();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n};\n/**\n * optional string result = 1;\n * @return {string}\n */\n\n\nproto.pb.svc.manager.WhenStartScraperRes.prototype.getResult = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.svc.manager.WhenStartScraperRes} returns this\n */\n\n\nproto.pb.svc.manager.WhenStartScraperRes.prototype.setResult = function (value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.svc.manager.WhenStartAnalyzerReq.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.svc.manager.WhenStartAnalyzerReq.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.svc.manager.WhenStartAnalyzerReq} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.svc.manager.WhenStartAnalyzerReq.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      id: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.svc.manager.WhenStartAnalyzerReq}\n */\n\n\nproto.pb.svc.manager.WhenStartAnalyzerReq.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.svc.manager.WhenStartAnalyzerReq();\n  return proto.pb.svc.manager.WhenStartAnalyzerReq.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.svc.manager.WhenStartAnalyzerReq} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.svc.manager.WhenStartAnalyzerReq}\n */\n\n\nproto.pb.svc.manager.WhenStartAnalyzerReq.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setId(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.svc.manager.WhenStartAnalyzerReq.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.svc.manager.WhenStartAnalyzerReq.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.svc.manager.WhenStartAnalyzerReq} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.svc.manager.WhenStartAnalyzerReq.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getId();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n};\n/**\n * optional string id = 1;\n * @return {string}\n */\n\n\nproto.pb.svc.manager.WhenStartAnalyzerReq.prototype.getId = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.svc.manager.WhenStartAnalyzerReq} returns this\n */\n\n\nproto.pb.svc.manager.WhenStartAnalyzerReq.prototype.setId = function (value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.svc.manager.WhenStartAnalyzerRes.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.svc.manager.WhenStartAnalyzerRes.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.svc.manager.WhenStartAnalyzerRes} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.svc.manager.WhenStartAnalyzerRes.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      result: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.svc.manager.WhenStartAnalyzerRes}\n */\n\n\nproto.pb.svc.manager.WhenStartAnalyzerRes.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.svc.manager.WhenStartAnalyzerRes();\n  return proto.pb.svc.manager.WhenStartAnalyzerRes.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.svc.manager.WhenStartAnalyzerRes} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.svc.manager.WhenStartAnalyzerRes}\n */\n\n\nproto.pb.svc.manager.WhenStartAnalyzerRes.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setResult(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.svc.manager.WhenStartAnalyzerRes.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.svc.manager.WhenStartAnalyzerRes.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.svc.manager.WhenStartAnalyzerRes} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.svc.manager.WhenStartAnalyzerRes.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getResult();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n};\n/**\n * optional string result = 1;\n * @return {string}\n */\n\n\nproto.pb.svc.manager.WhenStartAnalyzerRes.prototype.getResult = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.svc.manager.WhenStartAnalyzerRes} returns this\n */\n\n\nproto.pb.svc.manager.WhenStartAnalyzerRes.prototype.setResult = function (value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.svc.manager.WhenScraperHavingErrReq.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.svc.manager.WhenScraperHavingErrReq.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.svc.manager.WhenScraperHavingErrReq} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.svc.manager.WhenScraperHavingErrReq.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      id: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n      msg: jspb.Message.getFieldWithDefault(msg, 2, \"\")\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.svc.manager.WhenScraperHavingErrReq}\n */\n\n\nproto.pb.svc.manager.WhenScraperHavingErrReq.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.svc.manager.WhenScraperHavingErrReq();\n  return proto.pb.svc.manager.WhenScraperHavingErrReq.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.svc.manager.WhenScraperHavingErrReq} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.svc.manager.WhenScraperHavingErrReq}\n */\n\n\nproto.pb.svc.manager.WhenScraperHavingErrReq.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setId(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setMsg(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.svc.manager.WhenScraperHavingErrReq.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.svc.manager.WhenScraperHavingErrReq.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.svc.manager.WhenScraperHavingErrReq} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.svc.manager.WhenScraperHavingErrReq.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getId();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n\n  f = message.getMsg();\n\n  if (f.length > 0) {\n    writer.writeString(2, f);\n  }\n};\n/**\n * optional string id = 1;\n * @return {string}\n */\n\n\nproto.pb.svc.manager.WhenScraperHavingErrReq.prototype.getId = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.svc.manager.WhenScraperHavingErrReq} returns this\n */\n\n\nproto.pb.svc.manager.WhenScraperHavingErrReq.prototype.setId = function (value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n/**\n * optional string msg = 2;\n * @return {string}\n */\n\n\nproto.pb.svc.manager.WhenScraperHavingErrReq.prototype.getMsg = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 2, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.svc.manager.WhenScraperHavingErrReq} returns this\n */\n\n\nproto.pb.svc.manager.WhenScraperHavingErrReq.prototype.setMsg = function (value) {\n  return jspb.Message.setProto3StringField(this, 2, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.svc.manager.WhenScraperHavingErrRes.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.svc.manager.WhenScraperHavingErrRes.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.svc.manager.WhenScraperHavingErrRes} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.svc.manager.WhenScraperHavingErrRes.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {};\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.svc.manager.WhenScraperHavingErrRes}\n */\n\n\nproto.pb.svc.manager.WhenScraperHavingErrRes.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.svc.manager.WhenScraperHavingErrRes();\n  return proto.pb.svc.manager.WhenScraperHavingErrRes.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.svc.manager.WhenScraperHavingErrRes} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.svc.manager.WhenScraperHavingErrRes}\n */\n\n\nproto.pb.svc.manager.WhenScraperHavingErrRes.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.svc.manager.WhenScraperHavingErrRes.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.svc.manager.WhenScraperHavingErrRes.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.svc.manager.WhenScraperHavingErrRes} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.svc.manager.WhenScraperHavingErrRes.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.svc.manager.WhenAnalyzerHavingErrReq.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.svc.manager.WhenAnalyzerHavingErrReq.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.svc.manager.WhenAnalyzerHavingErrReq} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.svc.manager.WhenAnalyzerHavingErrReq.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      id: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n      msg: jspb.Message.getFieldWithDefault(msg, 2, \"\")\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.svc.manager.WhenAnalyzerHavingErrReq}\n */\n\n\nproto.pb.svc.manager.WhenAnalyzerHavingErrReq.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.svc.manager.WhenAnalyzerHavingErrReq();\n  return proto.pb.svc.manager.WhenAnalyzerHavingErrReq.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.svc.manager.WhenAnalyzerHavingErrReq} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.svc.manager.WhenAnalyzerHavingErrReq}\n */\n\n\nproto.pb.svc.manager.WhenAnalyzerHavingErrReq.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setId(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setMsg(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.svc.manager.WhenAnalyzerHavingErrReq.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.svc.manager.WhenAnalyzerHavingErrReq.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.svc.manager.WhenAnalyzerHavingErrReq} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.svc.manager.WhenAnalyzerHavingErrReq.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getId();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n\n  f = message.getMsg();\n\n  if (f.length > 0) {\n    writer.writeString(2, f);\n  }\n};\n/**\n * optional string id = 1;\n * @return {string}\n */\n\n\nproto.pb.svc.manager.WhenAnalyzerHavingErrReq.prototype.getId = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.svc.manager.WhenAnalyzerHavingErrReq} returns this\n */\n\n\nproto.pb.svc.manager.WhenAnalyzerHavingErrReq.prototype.setId = function (value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n/**\n * optional string msg = 2;\n * @return {string}\n */\n\n\nproto.pb.svc.manager.WhenAnalyzerHavingErrReq.prototype.getMsg = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 2, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.svc.manager.WhenAnalyzerHavingErrReq} returns this\n */\n\n\nproto.pb.svc.manager.WhenAnalyzerHavingErrReq.prototype.setMsg = function (value) {\n  return jspb.Message.setProto3StringField(this, 2, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.svc.manager.WhenAnalyzerHavingErrRes.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.svc.manager.WhenAnalyzerHavingErrRes.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.svc.manager.WhenAnalyzerHavingErrRes} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.svc.manager.WhenAnalyzerHavingErrRes.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {};\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.svc.manager.WhenAnalyzerHavingErrRes}\n */\n\n\nproto.pb.svc.manager.WhenAnalyzerHavingErrRes.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.svc.manager.WhenAnalyzerHavingErrRes();\n  return proto.pb.svc.manager.WhenAnalyzerHavingErrRes.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.svc.manager.WhenAnalyzerHavingErrRes} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.svc.manager.WhenAnalyzerHavingErrRes}\n */\n\n\nproto.pb.svc.manager.WhenAnalyzerHavingErrRes.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.svc.manager.WhenAnalyzerHavingErrRes.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.svc.manager.WhenAnalyzerHavingErrRes.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.svc.manager.WhenAnalyzerHavingErrRes} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.svc.manager.WhenAnalyzerHavingErrRes.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.svc.manager.UpdateWorkerStatusReq.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.svc.manager.UpdateWorkerStatusReq.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.svc.manager.UpdateWorkerStatusReq} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.svc.manager.UpdateWorkerStatusReq.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      id: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n      msg: jspb.Message.getFieldWithDefault(msg, 2, \"\")\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.svc.manager.UpdateWorkerStatusReq}\n */\n\n\nproto.pb.svc.manager.UpdateWorkerStatusReq.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.svc.manager.UpdateWorkerStatusReq();\n  return proto.pb.svc.manager.UpdateWorkerStatusReq.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.svc.manager.UpdateWorkerStatusReq} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.svc.manager.UpdateWorkerStatusReq}\n */\n\n\nproto.pb.svc.manager.UpdateWorkerStatusReq.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setId(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setMsg(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.svc.manager.UpdateWorkerStatusReq.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.svc.manager.UpdateWorkerStatusReq.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.svc.manager.UpdateWorkerStatusReq} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.svc.manager.UpdateWorkerStatusReq.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getId();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n\n  f = message.getMsg();\n\n  if (f.length > 0) {\n    writer.writeString(2, f);\n  }\n};\n/**\n * optional string id = 1;\n * @return {string}\n */\n\n\nproto.pb.svc.manager.UpdateWorkerStatusReq.prototype.getId = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.svc.manager.UpdateWorkerStatusReq} returns this\n */\n\n\nproto.pb.svc.manager.UpdateWorkerStatusReq.prototype.setId = function (value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n/**\n * optional string msg = 2;\n * @return {string}\n */\n\n\nproto.pb.svc.manager.UpdateWorkerStatusReq.prototype.getMsg = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 2, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.svc.manager.UpdateWorkerStatusReq} returns this\n */\n\n\nproto.pb.svc.manager.UpdateWorkerStatusReq.prototype.setMsg = function (value) {\n  return jspb.Message.setProto3StringField(this, 2, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.svc.manager.UpdateWorkerStatusRes.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.svc.manager.UpdateWorkerStatusRes.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.svc.manager.UpdateWorkerStatusRes} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.svc.manager.UpdateWorkerStatusRes.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {};\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.svc.manager.UpdateWorkerStatusRes}\n */\n\n\nproto.pb.svc.manager.UpdateWorkerStatusRes.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.svc.manager.UpdateWorkerStatusRes();\n  return proto.pb.svc.manager.UpdateWorkerStatusRes.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.svc.manager.UpdateWorkerStatusRes} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.svc.manager.UpdateWorkerStatusRes}\n */\n\n\nproto.pb.svc.manager.UpdateWorkerStatusRes.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.svc.manager.UpdateWorkerStatusRes.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.svc.manager.UpdateWorkerStatusRes.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.svc.manager.UpdateWorkerStatusRes} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.svc.manager.UpdateWorkerStatusRes.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n};\n\ngoog.object.extend(exports, proto.pb.svc.manager);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./gen/pb/svc/manager/manager_pb.js\n");

/***/ }),

/***/ "./gen/pb/svc/manager/manager_pb_service.js":
/*!**************************************************!*\
  !*** ./gen/pb/svc/manager/manager_pb_service.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("// package: pb.svc.manager\n// file: pb/svc/manager/manager.proto\nvar pb_svc_manager_manager_pb = __webpack_require__(/*! ../../../pb/svc/manager/manager_pb */ \"./gen/pb/svc/manager/manager_pb.js\");\n\nvar grpc = (__webpack_require__(/*! @improbable-eng/grpc-web */ \"@improbable-eng/grpc-web\").grpc);\n\nvar Manager = function () {\n  function Manager() {}\n\n  Manager.serviceName = \"pb.svc.manager.Manager\";\n  return Manager;\n}();\n\nManager.CreateNewJob = {\n  methodName: \"CreateNewJob\",\n  service: Manager,\n  requestStream: false,\n  responseStream: false,\n  requestType: pb_svc_manager_manager_pb.CreateNewJobReq,\n  responseType: pb_svc_manager_manager_pb.CreateNewJobRes\n};\nManager.ReRunJob = {\n  methodName: \"ReRunJob\",\n  service: Manager,\n  requestStream: false,\n  responseStream: false,\n  requestType: pb_svc_manager_manager_pb.ReRunJobReq,\n  responseType: pb_svc_manager_manager_pb.ReRunJobRes\n};\nManager.GetJobStatus = {\n  methodName: \"GetJobStatus\",\n  service: Manager,\n  requestStream: false,\n  responseStream: false,\n  requestType: pb_svc_manager_manager_pb.GetJobStatusReq,\n  responseType: pb_svc_manager_manager_pb.GetJobStatusRes\n};\nManager.GetJobList = {\n  methodName: \"GetJobList\",\n  service: Manager,\n  requestStream: false,\n  responseStream: false,\n  requestType: pb_svc_manager_manager_pb.GetJobListReq,\n  responseType: pb_svc_manager_manager_pb.GetJobListRes\n};\nManager.GetJobIsReRun = {\n  methodName: \"GetJobIsReRun\",\n  service: Manager,\n  requestStream: false,\n  responseStream: false,\n  requestType: pb_svc_manager_manager_pb.GetJobIsReRunReq,\n  responseType: pb_svc_manager_manager_pb.GetJobIsReRunRes\n};\nManager.GetWorkerList = {\n  methodName: \"GetWorkerList\",\n  service: Manager,\n  requestStream: false,\n  responseStream: false,\n  requestType: pb_svc_manager_manager_pb.GetWorkerListReq,\n  responseType: pb_svc_manager_manager_pb.GetWorkerListRes\n};\nManager.GetArticleInfo = {\n  methodName: \"GetArticleInfo\",\n  service: Manager,\n  requestStream: false,\n  responseStream: false,\n  requestType: pb_svc_manager_manager_pb.GetArticleInfoReq,\n  responseType: pb_svc_manager_manager_pb.GetArticleInfoRes\n};\nManager.GetArticleList = {\n  methodName: \"GetArticleList\",\n  service: Manager,\n  requestStream: false,\n  responseStream: false,\n  requestType: pb_svc_manager_manager_pb.GetArticleListReq,\n  responseType: pb_svc_manager_manager_pb.GetArticleListRes\n};\nManager.GetArticleCountByHour = {\n  methodName: \"GetArticleCountByHour\",\n  service: Manager,\n  requestStream: false,\n  responseStream: false,\n  requestType: pb_svc_manager_manager_pb.GetArticleCountByHourReq,\n  responseType: pb_svc_manager_manager_pb.GetArticleCountByHourRes\n};\nManager.GetArticleCountByDay = {\n  methodName: \"GetArticleCountByDay\",\n  service: Manager,\n  requestStream: false,\n  responseStream: false,\n  requestType: pb_svc_manager_manager_pb.GetArticleCountByDayReq,\n  responseType: pb_svc_manager_manager_pb.GetArticleCountByDayRes\n};\nManager.UpdateWorkerStatus = {\n  methodName: \"UpdateWorkerStatus\",\n  service: Manager,\n  requestStream: false,\n  responseStream: false,\n  requestType: pb_svc_manager_manager_pb.UpdateWorkerStatusReq,\n  responseType: pb_svc_manager_manager_pb.UpdateWorkerStatusRes\n};\nManager.UpdateJobStatus = {\n  methodName: \"UpdateJobStatus\",\n  service: Manager,\n  requestStream: false,\n  responseStream: false,\n  requestType: pb_svc_manager_manager_pb.UpdateJobStatusReq,\n  responseType: pb_svc_manager_manager_pb.UpdateJobStatusRes\n};\nManager.WhenStartScraper = {\n  methodName: \"WhenStartScraper\",\n  service: Manager,\n  requestStream: false,\n  responseStream: false,\n  requestType: pb_svc_manager_manager_pb.WhenStartScraperReq,\n  responseType: pb_svc_manager_manager_pb.WhenStartScraperRes\n};\nManager.WhenDoneScraper = {\n  methodName: \"WhenDoneScraper\",\n  service: Manager,\n  requestStream: false,\n  responseStream: false,\n  requestType: pb_svc_manager_manager_pb.WhenDoneScraperReq,\n  responseType: pb_svc_manager_manager_pb.WhenDoneScraperRes\n};\nManager.WhenStartAnalyzer = {\n  methodName: \"WhenStartAnalyzer\",\n  service: Manager,\n  requestStream: false,\n  responseStream: false,\n  requestType: pb_svc_manager_manager_pb.WhenStartAnalyzerReq,\n  responseType: pb_svc_manager_manager_pb.WhenStartAnalyzerRes\n};\nManager.WhenDoneAnalyzer = {\n  methodName: \"WhenDoneAnalyzer\",\n  service: Manager,\n  requestStream: false,\n  responseStream: false,\n  requestType: pb_svc_manager_manager_pb.WhenDoneAnalyzerReq,\n  responseType: pb_svc_manager_manager_pb.WhenDoneAnalyzerRes\n};\nManager.WhenScraperHavingErr = {\n  methodName: \"WhenScraperHavingErr\",\n  service: Manager,\n  requestStream: false,\n  responseStream: false,\n  requestType: pb_svc_manager_manager_pb.WhenScraperHavingErrReq,\n  responseType: pb_svc_manager_manager_pb.WhenScraperHavingErrRes\n};\nManager.WhenAnalyzerHavingErr = {\n  methodName: \"WhenAnalyzerHavingErr\",\n  service: Manager,\n  requestStream: false,\n  responseStream: false,\n  requestType: pb_svc_manager_manager_pb.WhenAnalyzerHavingErrReq,\n  responseType: pb_svc_manager_manager_pb.WhenAnalyzerHavingErrRes\n};\nManager.StopJob = {\n  methodName: \"StopJob\",\n  service: Manager,\n  requestStream: false,\n  responseStream: false,\n  requestType: pb_svc_manager_manager_pb.StopJobReq,\n  responseType: pb_svc_manager_manager_pb.StopJobRes\n};\nexports.Manager = Manager;\n\nfunction ManagerClient(serviceHost, options) {\n  this.serviceHost = serviceHost;\n  this.options = options || {};\n}\n\nManagerClient.prototype.createNewJob = function createNewJob(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n\n  var client = grpc.unary(Manager.CreateNewJob, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nManagerClient.prototype.reRunJob = function reRunJob(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n\n  var client = grpc.unary(Manager.ReRunJob, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nManagerClient.prototype.getJobStatus = function getJobStatus(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n\n  var client = grpc.unary(Manager.GetJobStatus, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nManagerClient.prototype.getJobList = function getJobList(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n\n  var client = grpc.unary(Manager.GetJobList, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nManagerClient.prototype.getJobIsReRun = function getJobIsReRun(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n\n  var client = grpc.unary(Manager.GetJobIsReRun, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nManagerClient.prototype.getWorkerList = function getWorkerList(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n\n  var client = grpc.unary(Manager.GetWorkerList, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nManagerClient.prototype.getArticleInfo = function getArticleInfo(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n\n  var client = grpc.unary(Manager.GetArticleInfo, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nManagerClient.prototype.getArticleList = function getArticleList(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n\n  var client = grpc.unary(Manager.GetArticleList, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nManagerClient.prototype.getArticleCountByHour = function getArticleCountByHour(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n\n  var client = grpc.unary(Manager.GetArticleCountByHour, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nManagerClient.prototype.getArticleCountByDay = function getArticleCountByDay(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n\n  var client = grpc.unary(Manager.GetArticleCountByDay, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nManagerClient.prototype.updateWorkerStatus = function updateWorkerStatus(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n\n  var client = grpc.unary(Manager.UpdateWorkerStatus, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nManagerClient.prototype.updateJobStatus = function updateJobStatus(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n\n  var client = grpc.unary(Manager.UpdateJobStatus, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nManagerClient.prototype.whenStartScraper = function whenStartScraper(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n\n  var client = grpc.unary(Manager.WhenStartScraper, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nManagerClient.prototype.whenDoneScraper = function whenDoneScraper(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n\n  var client = grpc.unary(Manager.WhenDoneScraper, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nManagerClient.prototype.whenStartAnalyzer = function whenStartAnalyzer(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n\n  var client = grpc.unary(Manager.WhenStartAnalyzer, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nManagerClient.prototype.whenDoneAnalyzer = function whenDoneAnalyzer(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n\n  var client = grpc.unary(Manager.WhenDoneAnalyzer, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nManagerClient.prototype.whenScraperHavingErr = function whenScraperHavingErr(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n\n  var client = grpc.unary(Manager.WhenScraperHavingErr, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nManagerClient.prototype.whenAnalyzerHavingErr = function whenAnalyzerHavingErr(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n\n  var client = grpc.unary(Manager.WhenAnalyzerHavingErr, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nManagerClient.prototype.stopJob = function stopJob(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n\n  var client = grpc.unary(Manager.StopJob, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nexports.ManagerClient = ManagerClient;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./gen/pb/svc/manager/manager_pb_service.js\n");

/***/ }),

/***/ "./gen/pb/unit/article/article_pb.js":
/*!*******************************************!*\
  !*** ./gen/pb/unit/article/article_pb.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("// source: pb/unit/article/article.proto\n\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\n/* eslint-disable */\n// @ts-nocheck\nvar jspb = __webpack_require__(/*! google-protobuf */ \"google-protobuf\");\n\nvar goog = jspb;\n\nvar global = function () {\n  return this || window || global || self || Function('return this')();\n}.call(null);\n\ngoog.exportSymbol('proto.pb.unit.article.Article', null, global);\ngoog.exportSymbol('proto.pb.unit.article.ArticleCount', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\nproto.pb.unit.article.Article = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.pb.unit.article.Article, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.unit.article.Article.displayName = 'proto.pb.unit.article.Article';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.pb.unit.article.ArticleCount = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.pb.unit.article.ArticleCount, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.unit.article.ArticleCount.displayName = 'proto.pb.unit.article.ArticleCount';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.unit.article.Article.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.unit.article.Article.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.unit.article.Article} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.unit.article.Article.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      id: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n      author: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n      keyword: jspb.Message.getFieldWithDefault(msg, 3, \"\"),\n      content: jspb.Message.getFieldWithDefault(msg, 4, \"\"),\n      platform: jspb.Message.getFieldWithDefault(msg, 5, \"\"),\n      scoreHappy: jspb.Message.getFieldWithDefault(msg, 6, \"\"),\n      scoreFear: jspb.Message.getFieldWithDefault(msg, 7, \"\"),\n      scoreEmbarrassed: jspb.Message.getFieldWithDefault(msg, 8, \"\"),\n      scoreSad: jspb.Message.getFieldWithDefault(msg, 9, \"\"),\n      scoreRage: jspb.Message.getFieldWithDefault(msg, 10, \"\"),\n      scoreHurt: jspb.Message.getFieldWithDefault(msg, 11, \"\"),\n      scoreMaxValue: jspb.Message.getFieldWithDefault(msg, 12, \"\"),\n      scoreMaxName: jspb.Message.getFieldWithDefault(msg, 13, \"\"),\n      createAt: jspb.Message.getFieldWithDefault(msg, 14, \"\"),\n      jobId: jspb.Message.getFieldWithDefault(msg, 15, \"\"),\n      workerId: jspb.Message.getFieldWithDefault(msg, 16, \"\")\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.unit.article.Article}\n */\n\n\nproto.pb.unit.article.Article.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.unit.article.Article();\n  return proto.pb.unit.article.Article.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.unit.article.Article} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.unit.article.Article}\n */\n\n\nproto.pb.unit.article.Article.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setId(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setAuthor(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setKeyword(value);\n        break;\n\n      case 4:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setContent(value);\n        break;\n\n      case 5:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setPlatform(value);\n        break;\n\n      case 6:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setScoreHappy(value);\n        break;\n\n      case 7:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setScoreFear(value);\n        break;\n\n      case 8:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setScoreEmbarrassed(value);\n        break;\n\n      case 9:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setScoreSad(value);\n        break;\n\n      case 10:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setScoreRage(value);\n        break;\n\n      case 11:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setScoreHurt(value);\n        break;\n\n      case 12:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setScoreMaxValue(value);\n        break;\n\n      case 13:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setScoreMaxName(value);\n        break;\n\n      case 14:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setCreateAt(value);\n        break;\n\n      case 15:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setJobId(value);\n        break;\n\n      case 16:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setWorkerId(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.unit.article.Article.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.unit.article.Article.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.unit.article.Article} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.unit.article.Article.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getId();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n\n  f = message.getAuthor();\n\n  if (f.length > 0) {\n    writer.writeString(2, f);\n  }\n\n  f = message.getKeyword();\n\n  if (f.length > 0) {\n    writer.writeString(3, f);\n  }\n\n  f = message.getContent();\n\n  if (f.length > 0) {\n    writer.writeString(4, f);\n  }\n\n  f = message.getPlatform();\n\n  if (f.length > 0) {\n    writer.writeString(5, f);\n  }\n\n  f = message.getScoreHappy();\n\n  if (f.length > 0) {\n    writer.writeString(6, f);\n  }\n\n  f = message.getScoreFear();\n\n  if (f.length > 0) {\n    writer.writeString(7, f);\n  }\n\n  f = message.getScoreEmbarrassed();\n\n  if (f.length > 0) {\n    writer.writeString(8, f);\n  }\n\n  f = message.getScoreSad();\n\n  if (f.length > 0) {\n    writer.writeString(9, f);\n  }\n\n  f = message.getScoreRage();\n\n  if (f.length > 0) {\n    writer.writeString(10, f);\n  }\n\n  f = message.getScoreHurt();\n\n  if (f.length > 0) {\n    writer.writeString(11, f);\n  }\n\n  f = message.getScoreMaxValue();\n\n  if (f.length > 0) {\n    writer.writeString(12, f);\n  }\n\n  f = message.getScoreMaxName();\n\n  if (f.length > 0) {\n    writer.writeString(13, f);\n  }\n\n  f = message.getCreateAt();\n\n  if (f.length > 0) {\n    writer.writeString(14, f);\n  }\n\n  f = message.getJobId();\n\n  if (f.length > 0) {\n    writer.writeString(15, f);\n  }\n\n  f = message.getWorkerId();\n\n  if (f.length > 0) {\n    writer.writeString(16, f);\n  }\n};\n/**\n * optional string id = 1;\n * @return {string}\n */\n\n\nproto.pb.unit.article.Article.prototype.getId = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.unit.article.Article} returns this\n */\n\n\nproto.pb.unit.article.Article.prototype.setId = function (value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n/**\n * optional string author = 2;\n * @return {string}\n */\n\n\nproto.pb.unit.article.Article.prototype.getAuthor = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 2, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.unit.article.Article} returns this\n */\n\n\nproto.pb.unit.article.Article.prototype.setAuthor = function (value) {\n  return jspb.Message.setProto3StringField(this, 2, value);\n};\n/**\n * optional string keyword = 3;\n * @return {string}\n */\n\n\nproto.pb.unit.article.Article.prototype.getKeyword = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 3, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.unit.article.Article} returns this\n */\n\n\nproto.pb.unit.article.Article.prototype.setKeyword = function (value) {\n  return jspb.Message.setProto3StringField(this, 3, value);\n};\n/**\n * optional string content = 4;\n * @return {string}\n */\n\n\nproto.pb.unit.article.Article.prototype.getContent = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 4, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.unit.article.Article} returns this\n */\n\n\nproto.pb.unit.article.Article.prototype.setContent = function (value) {\n  return jspb.Message.setProto3StringField(this, 4, value);\n};\n/**\n * optional string platform = 5;\n * @return {string}\n */\n\n\nproto.pb.unit.article.Article.prototype.getPlatform = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 5, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.unit.article.Article} returns this\n */\n\n\nproto.pb.unit.article.Article.prototype.setPlatform = function (value) {\n  return jspb.Message.setProto3StringField(this, 5, value);\n};\n/**\n * optional string Score_happy = 6;\n * @return {string}\n */\n\n\nproto.pb.unit.article.Article.prototype.getScoreHappy = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 6, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.unit.article.Article} returns this\n */\n\n\nproto.pb.unit.article.Article.prototype.setScoreHappy = function (value) {\n  return jspb.Message.setProto3StringField(this, 6, value);\n};\n/**\n * optional string Score_fear = 7;\n * @return {string}\n */\n\n\nproto.pb.unit.article.Article.prototype.getScoreFear = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 7, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.unit.article.Article} returns this\n */\n\n\nproto.pb.unit.article.Article.prototype.setScoreFear = function (value) {\n  return jspb.Message.setProto3StringField(this, 7, value);\n};\n/**\n * optional string Score_embarrassed = 8;\n * @return {string}\n */\n\n\nproto.pb.unit.article.Article.prototype.getScoreEmbarrassed = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 8, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.unit.article.Article} returns this\n */\n\n\nproto.pb.unit.article.Article.prototype.setScoreEmbarrassed = function (value) {\n  return jspb.Message.setProto3StringField(this, 8, value);\n};\n/**\n * optional string Score_sad = 9;\n * @return {string}\n */\n\n\nproto.pb.unit.article.Article.prototype.getScoreSad = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 9, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.unit.article.Article} returns this\n */\n\n\nproto.pb.unit.article.Article.prototype.setScoreSad = function (value) {\n  return jspb.Message.setProto3StringField(this, 9, value);\n};\n/**\n * optional string Score_rage = 10;\n * @return {string}\n */\n\n\nproto.pb.unit.article.Article.prototype.getScoreRage = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 10, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.unit.article.Article} returns this\n */\n\n\nproto.pb.unit.article.Article.prototype.setScoreRage = function (value) {\n  return jspb.Message.setProto3StringField(this, 10, value);\n};\n/**\n * optional string Score_hurt = 11;\n * @return {string}\n */\n\n\nproto.pb.unit.article.Article.prototype.getScoreHurt = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 11, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.unit.article.Article} returns this\n */\n\n\nproto.pb.unit.article.Article.prototype.setScoreHurt = function (value) {\n  return jspb.Message.setProto3StringField(this, 11, value);\n};\n/**\n * optional string score_max_value = 12;\n * @return {string}\n */\n\n\nproto.pb.unit.article.Article.prototype.getScoreMaxValue = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 12, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.unit.article.Article} returns this\n */\n\n\nproto.pb.unit.article.Article.prototype.setScoreMaxValue = function (value) {\n  return jspb.Message.setProto3StringField(this, 12, value);\n};\n/**\n * optional string score_max_name = 13;\n * @return {string}\n */\n\n\nproto.pb.unit.article.Article.prototype.getScoreMaxName = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 13, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.unit.article.Article} returns this\n */\n\n\nproto.pb.unit.article.Article.prototype.setScoreMaxName = function (value) {\n  return jspb.Message.setProto3StringField(this, 13, value);\n};\n/**\n * optional string create_at = 14;\n * @return {string}\n */\n\n\nproto.pb.unit.article.Article.prototype.getCreateAt = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 14, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.unit.article.Article} returns this\n */\n\n\nproto.pb.unit.article.Article.prototype.setCreateAt = function (value) {\n  return jspb.Message.setProto3StringField(this, 14, value);\n};\n/**\n * optional string job_id = 15;\n * @return {string}\n */\n\n\nproto.pb.unit.article.Article.prototype.getJobId = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 15, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.unit.article.Article} returns this\n */\n\n\nproto.pb.unit.article.Article.prototype.setJobId = function (value) {\n  return jspb.Message.setProto3StringField(this, 15, value);\n};\n/**\n * optional string worker_id = 16;\n * @return {string}\n */\n\n\nproto.pb.unit.article.Article.prototype.getWorkerId = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 16, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.unit.article.Article} returns this\n */\n\n\nproto.pb.unit.article.Article.prototype.setWorkerId = function (value) {\n  return jspb.Message.setProto3StringField(this, 16, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.unit.article.ArticleCount.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.unit.article.ArticleCount.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.unit.article.ArticleCount} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.unit.article.ArticleCount.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      createattime: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n      count: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n      scoremaxname: jspb.Message.getFieldWithDefault(msg, 3, \"\")\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.unit.article.ArticleCount}\n */\n\n\nproto.pb.unit.article.ArticleCount.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.unit.article.ArticleCount();\n  return proto.pb.unit.article.ArticleCount.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.unit.article.ArticleCount} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.unit.article.ArticleCount}\n */\n\n\nproto.pb.unit.article.ArticleCount.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setCreateattime(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setCount(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setScoremaxname(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.unit.article.ArticleCount.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.unit.article.ArticleCount.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.unit.article.ArticleCount} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.unit.article.ArticleCount.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getCreateattime();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n\n  f = message.getCount();\n\n  if (f.length > 0) {\n    writer.writeString(2, f);\n  }\n\n  f = message.getScoremaxname();\n\n  if (f.length > 0) {\n    writer.writeString(3, f);\n  }\n};\n/**\n * optional string createAtTime = 1;\n * @return {string}\n */\n\n\nproto.pb.unit.article.ArticleCount.prototype.getCreateattime = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.unit.article.ArticleCount} returns this\n */\n\n\nproto.pb.unit.article.ArticleCount.prototype.setCreateattime = function (value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n/**\n * optional string count = 2;\n * @return {string}\n */\n\n\nproto.pb.unit.article.ArticleCount.prototype.getCount = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 2, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.unit.article.ArticleCount} returns this\n */\n\n\nproto.pb.unit.article.ArticleCount.prototype.setCount = function (value) {\n  return jspb.Message.setProto3StringField(this, 2, value);\n};\n/**\n * optional string scoreMaxName = 3;\n * @return {string}\n */\n\n\nproto.pb.unit.article.ArticleCount.prototype.getScoremaxname = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 3, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.unit.article.ArticleCount} returns this\n */\n\n\nproto.pb.unit.article.ArticleCount.prototype.setScoremaxname = function (value) {\n  return jspb.Message.setProto3StringField(this, 3, value);\n};\n\ngoog.object.extend(exports, proto.pb.unit.article);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./gen/pb/unit/article/article_pb.js\n");

/***/ }),

/***/ "./gen/pb/unit/job/job_pb.js":
/*!***********************************!*\
  !*** ./gen/pb/unit/job/job_pb.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("// source: pb/unit/job/job.proto\n\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\n/* eslint-disable */\n// @ts-nocheck\nvar jspb = __webpack_require__(/*! google-protobuf */ \"google-protobuf\");\n\nvar goog = jspb;\n\nvar global = function () {\n  return this || window || global || self || Function('return this')();\n}.call(null);\n\ngoog.exportSymbol('proto.pb.unit.job.Job', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\nproto.pb.unit.job.Job = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.pb.unit.job.Job, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.unit.job.Job.displayName = 'proto.pb.unit.job.Job';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.unit.job.Job.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.unit.job.Job.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.unit.job.Job} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.unit.job.Job.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      id: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n      status: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n      keyword: jspb.Message.getFieldWithDefault(msg, 3, \"\"),\n      owner: jspb.Message.getFieldWithDefault(msg, 4, \"\"),\n      date: jspb.Message.getFieldWithDefault(msg, 5, \"\"),\n      autorerun: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.unit.job.Job}\n */\n\n\nproto.pb.unit.job.Job.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.unit.job.Job();\n  return proto.pb.unit.job.Job.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.unit.job.Job} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.unit.job.Job}\n */\n\n\nproto.pb.unit.job.Job.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setId(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setStatus(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setKeyword(value);\n        break;\n\n      case 4:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setOwner(value);\n        break;\n\n      case 5:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setDate(value);\n        break;\n\n      case 6:\n        var value =\n        /** @type {boolean} */\n        reader.readBool();\n        msg.setAutorerun(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.unit.job.Job.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.unit.job.Job.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.unit.job.Job} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.unit.job.Job.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getId();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n\n  f = message.getStatus();\n\n  if (f.length > 0) {\n    writer.writeString(2, f);\n  }\n\n  f = message.getKeyword();\n\n  if (f.length > 0) {\n    writer.writeString(3, f);\n  }\n\n  f = message.getOwner();\n\n  if (f.length > 0) {\n    writer.writeString(4, f);\n  }\n\n  f = message.getDate();\n\n  if (f.length > 0) {\n    writer.writeString(5, f);\n  }\n\n  f = message.getAutorerun();\n\n  if (f) {\n    writer.writeBool(6, f);\n  }\n};\n/**\n * optional string id = 1;\n * @return {string}\n */\n\n\nproto.pb.unit.job.Job.prototype.getId = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.unit.job.Job} returns this\n */\n\n\nproto.pb.unit.job.Job.prototype.setId = function (value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n/**\n * optional string status = 2;\n * @return {string}\n */\n\n\nproto.pb.unit.job.Job.prototype.getStatus = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 2, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.unit.job.Job} returns this\n */\n\n\nproto.pb.unit.job.Job.prototype.setStatus = function (value) {\n  return jspb.Message.setProto3StringField(this, 2, value);\n};\n/**\n * optional string keyword = 3;\n * @return {string}\n */\n\n\nproto.pb.unit.job.Job.prototype.getKeyword = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 3, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.unit.job.Job} returns this\n */\n\n\nproto.pb.unit.job.Job.prototype.setKeyword = function (value) {\n  return jspb.Message.setProto3StringField(this, 3, value);\n};\n/**\n * optional string owner = 4;\n * @return {string}\n */\n\n\nproto.pb.unit.job.Job.prototype.getOwner = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 4, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.unit.job.Job} returns this\n */\n\n\nproto.pb.unit.job.Job.prototype.setOwner = function (value) {\n  return jspb.Message.setProto3StringField(this, 4, value);\n};\n/**\n * optional string date = 5;\n * @return {string}\n */\n\n\nproto.pb.unit.job.Job.prototype.getDate = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 5, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.unit.job.Job} returns this\n */\n\n\nproto.pb.unit.job.Job.prototype.setDate = function (value) {\n  return jspb.Message.setProto3StringField(this, 5, value);\n};\n/**\n * optional bool autoReRun = 6;\n * @return {boolean}\n */\n\n\nproto.pb.unit.job.Job.prototype.getAutorerun = function () {\n  return (\n    /** @type {boolean} */\n    jspb.Message.getBooleanFieldWithDefault(this, 6, false)\n  );\n};\n/**\n * @param {boolean} value\n * @return {!proto.pb.unit.job.Job} returns this\n */\n\n\nproto.pb.unit.job.Job.prototype.setAutorerun = function (value) {\n  return jspb.Message.setProto3BooleanField(this, 6, value);\n};\n\ngoog.object.extend(exports, proto.pb.unit.job);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./gen/pb/unit/job/job_pb.js\n");

/***/ }),

/***/ "./gen/pb/unit/worker/worker_pb.js":
/*!*****************************************!*\
  !*** ./gen/pb/unit/worker/worker_pb.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("// source: pb/unit/worker/worker.proto\n\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\n/* eslint-disable */\n// @ts-nocheck\nvar jspb = __webpack_require__(/*! google-protobuf */ \"google-protobuf\");\n\nvar goog = jspb;\n\nvar global = function () {\n  return this || window || global || self || Function('return this')();\n}.call(null);\n\ngoog.exportSymbol('proto.pb.unit.worker.Worker', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\nproto.pb.unit.worker.Worker = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.pb.unit.worker.Worker, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.pb.unit.worker.Worker.displayName = 'proto.pb.unit.worker.Worker';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.pb.unit.worker.Worker.prototype.toObject = function (opt_includeInstance) {\n    return proto.pb.unit.worker.Worker.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.pb.unit.worker.Worker} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.pb.unit.worker.Worker.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      workerId: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n      keyword: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n      status: jspb.Message.getFieldWithDefault(msg, 3, \"\"),\n      jobId: jspb.Message.getFieldWithDefault(msg, 4, \"\"),\n      updateAt: jspb.Message.getFieldWithDefault(msg, 5, \"\")\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.pb.unit.worker.Worker}\n */\n\n\nproto.pb.unit.worker.Worker.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.pb.unit.worker.Worker();\n  return proto.pb.unit.worker.Worker.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.pb.unit.worker.Worker} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.pb.unit.worker.Worker}\n */\n\n\nproto.pb.unit.worker.Worker.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setWorkerId(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setKeyword(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setStatus(value);\n        break;\n\n      case 4:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setJobId(value);\n        break;\n\n      case 5:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setUpdateAt(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.pb.unit.worker.Worker.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.pb.unit.worker.Worker.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.pb.unit.worker.Worker} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.pb.unit.worker.Worker.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getWorkerId();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n\n  f = message.getKeyword();\n\n  if (f.length > 0) {\n    writer.writeString(2, f);\n  }\n\n  f = message.getStatus();\n\n  if (f.length > 0) {\n    writer.writeString(3, f);\n  }\n\n  f = message.getJobId();\n\n  if (f.length > 0) {\n    writer.writeString(4, f);\n  }\n\n  f = message.getUpdateAt();\n\n  if (f.length > 0) {\n    writer.writeString(5, f);\n  }\n};\n/**\n * optional string worker_id = 1;\n * @return {string}\n */\n\n\nproto.pb.unit.worker.Worker.prototype.getWorkerId = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.unit.worker.Worker} returns this\n */\n\n\nproto.pb.unit.worker.Worker.prototype.setWorkerId = function (value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n/**\n * optional string keyword = 2;\n * @return {string}\n */\n\n\nproto.pb.unit.worker.Worker.prototype.getKeyword = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 2, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.unit.worker.Worker} returns this\n */\n\n\nproto.pb.unit.worker.Worker.prototype.setKeyword = function (value) {\n  return jspb.Message.setProto3StringField(this, 2, value);\n};\n/**\n * optional string status = 3;\n * @return {string}\n */\n\n\nproto.pb.unit.worker.Worker.prototype.getStatus = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 3, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.unit.worker.Worker} returns this\n */\n\n\nproto.pb.unit.worker.Worker.prototype.setStatus = function (value) {\n  return jspb.Message.setProto3StringField(this, 3, value);\n};\n/**\n * optional string job_id = 4;\n * @return {string}\n */\n\n\nproto.pb.unit.worker.Worker.prototype.getJobId = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 4, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.unit.worker.Worker} returns this\n */\n\n\nproto.pb.unit.worker.Worker.prototype.setJobId = function (value) {\n  return jspb.Message.setProto3StringField(this, 4, value);\n};\n/**\n * optional string update_at = 5;\n * @return {string}\n */\n\n\nproto.pb.unit.worker.Worker.prototype.getUpdateAt = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 5, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.pb.unit.worker.Worker} returns this\n */\n\n\nproto.pb.unit.worker.Worker.prototype.setUpdateAt = function (value) {\n  return jspb.Message.setProto3StringField(this, 5, value);\n};\n\ngoog.object.extend(exports, proto.pb.unit.worker);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./gen/pb/unit/worker/worker_pb.js\n");

/***/ }),

/***/ "./grpc/job.ts":
/*!*********************!*\
  !*** ./grpc/job.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CallGetJobList\": () => (/* binding */ CallGetJobList)\n/* harmony export */ });\n/* harmony import */ var _gen_pb_svc_manager_manager_pb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../gen/pb/svc/manager/manager_pb */ \"./gen/pb/svc/manager/manager_pb.js\");\n/* harmony import */ var _gen_pb_svc_manager_manager_pb__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_gen_pb_svc_manager_manager_pb__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _gen_pb_svc_manager_manager_pb_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../gen/pb/svc/manager/manager_pb_service */ \"./gen/pb/svc/manager/manager_pb_service.js\");\n\n\nasync function CallGetJobList(callback) {\n  const client = new _gen_pb_svc_manager_manager_pb_service__WEBPACK_IMPORTED_MODULE_1__.ManagerClient( // (await GrpcManager.getInstance()).GetHost(),\n  \"http://192.168.0.22:50008\");\n  const req = new _gen_pb_svc_manager_manager_pb__WEBPACK_IMPORTED_MODULE_0__.GetJobListReq();\n  client.getJobList(req, (err, res) => {\n    if (err) {\n      console.error(err);\n      return;\n    }\n\n    if (res != null) {\n      callback(res.toObject());\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ncnBjL2pvYi50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQU9PLGVBQWVFLGNBQWYsQ0FBOEJDLFFBQTlCLEVBQTZDO0VBQ2hELE1BQU1DLE1BQU0sR0FBRyxJQUFJSCxpRkFBSixFQUNYO0VBQ0EsMkJBRlcsQ0FBZjtFQUlBLE1BQU1JLEdBQUcsR0FBRyxJQUFJTCx5RUFBSixFQUFaO0VBQ0FJLE1BQU0sQ0FBQ0csVUFBUCxDQUFrQkYsR0FBbEIsRUFBdUIsQ0FBQ0csR0FBRCxFQUFNQyxHQUFOLEtBQWM7SUFDakMsSUFBSUQsR0FBSixFQUFTO01BQ0xFLE9BQU8sQ0FBQ0MsS0FBUixDQUFjSCxHQUFkO01BQ0E7SUFDSDs7SUFFRCxJQUFJQyxHQUFHLElBQUksSUFBWCxFQUFpQjtNQUNiTixRQUFRLENBQUNNLEdBQUcsQ0FBQ0csUUFBSixFQUFELENBQVI7SUFDSDtFQUNKLENBVEQ7QUFVSCIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLy4vZ3JwYy9qb2IudHM/ODNmNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBwYl9zdmNfbWFuYWdlciBmcm9tIFwiLi4vZ2VuL3BiL3N2Yy9tYW5hZ2VyL21hbmFnZXJfcGJcIjtcbmltcG9ydCB7XG4gICAgTWFuYWdlcixcbiAgICBNYW5hZ2VyQ2xpZW50LFxufSBmcm9tIFwiLi4vZ2VuL3BiL3N2Yy9tYW5hZ2VyL21hbmFnZXJfcGJfc2VydmljZVwiO1xuXG5pbXBvcnQgeyBHcnBjTWFuYWdlciB9IGZyb20gXCIuXCI7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBDYWxsR2V0Sm9iTGlzdChjYWxsYmFjazogYW55KSB7XG4gICAgY29uc3QgY2xpZW50ID0gbmV3IE1hbmFnZXJDbGllbnQoXG4gICAgICAgIC8vIChhd2FpdCBHcnBjTWFuYWdlci5nZXRJbnN0YW5jZSgpKS5HZXRIb3N0KCksXG4gICAgICAgIFwiaHR0cDovLzE5Mi4xNjguMC4yMjo1MDAwOFwiLFxuICAgICk7XG4gICAgY29uc3QgcmVxID0gbmV3IHBiX3N2Y19tYW5hZ2VyLkdldEpvYkxpc3RSZXEoKTtcbiAgICBjbGllbnQuZ2V0Sm9iTGlzdChyZXEsIChlcnIsIHJlcykgPT4ge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVzICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKHJlcy50b09iamVjdCgpKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuIl0sIm5hbWVzIjpbInBiX3N2Y19tYW5hZ2VyIiwiTWFuYWdlckNsaWVudCIsIkNhbGxHZXRKb2JMaXN0IiwiY2FsbGJhY2siLCJjbGllbnQiLCJyZXEiLCJHZXRKb2JMaXN0UmVxIiwiZ2V0Sm9iTGlzdCIsImVyciIsInJlcyIsImNvbnNvbGUiLCJlcnJvciIsInRvT2JqZWN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./grpc/job.ts\n");

/***/ }),

/***/ "./pages/index.tsx":
/*!*************************!*\
  !*** ./pages/index.tsx ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Home)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _grpc_job__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grpc/job */ \"./grpc/job.ts\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__);\nvar _jsxFileName = \"/Users/heejunmoon/code/src/github.com/aglide100/dak-keyword/ui2/pages/index.tsx\";\n\n\n\nfunction Home() {\n  const {\n    0: jobs,\n    1: setJobs\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    (0,_grpc_job__WEBPACK_IMPORTED_MODULE_1__.CallGetJobList)(res => {\n      setJobs(res.jobListList);\n      console.log(jobs);\n    });\n  }, []);\n  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(\"div\", {\n    className: \"w-full bg-gray-100 flex flex-col content-around\",\n    children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(\"div\", {\n      className: \"w-full flex flex-col\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWdlcy9pbmRleC50c3guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO0FBQ0E7O0FBRWUsU0FBU0ksSUFBVCxHQUFnQjtFQUMzQixNQUFNO0lBQUEsR0FBQ0MsSUFBRDtJQUFBLEdBQU9DO0VBQVAsSUFBa0JKLCtDQUFRLENBQUMsRUFBRCxDQUFoQztFQUVBRCxnREFBUyxDQUFDLE1BQU07SUFDWkUseURBQWMsQ0FBRUksR0FBRCxJQUFjO01BQ3pCRCxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsV0FBTCxDQUFQO01BQ0FDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZTCxJQUFaO0lBQ0gsQ0FIYSxDQUFkO0VBSUgsQ0FMUSxFQUtOLEVBTE0sQ0FBVDtFQU9BLG9CQUNJO0lBQUssU0FBUyxFQUFDLGlEQUFmO0lBQUEsdUJBQ0k7TUFBSyxTQUFTLEVBQUM7SUFBZjtNQUFBO01BQUE7TUFBQTtJQUFBO0VBREo7SUFBQTtJQUFBO0lBQUE7RUFBQSxRQURKO0FBS0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91aS8uL3BhZ2VzL2luZGV4LnRzeD8wN2ZmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBDYWxsR2V0Sm9iTGlzdCB9IGZyb20gXCIuLi9ncnBjL2pvYlwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBIb21lKCkge1xuICAgIGNvbnN0IFtqb2JzLCBzZXRKb2JzXSA9IHVzZVN0YXRlKFtdKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIENhbGxHZXRKb2JMaXN0KChyZXM6IGFueSkgPT4ge1xuICAgICAgICAgICAgc2V0Sm9icyhyZXMuam9iTGlzdExpc3QpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coam9icyk7XG4gICAgICAgIH0pO1xuICAgIH0sIFtdKTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidy1mdWxsIGJnLWdyYXktMTAwIGZsZXggZmxleC1jb2wgY29udGVudC1hcm91bmRcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidy1mdWxsIGZsZXggZmxleC1jb2xcIj48L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn1cbiJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZUVmZmVjdCIsInVzZVN0YXRlIiwiQ2FsbEdldEpvYkxpc3QiLCJIb21lIiwiam9icyIsInNldEpvYnMiLCJyZXMiLCJqb2JMaXN0TGlzdCIsImNvbnNvbGUiLCJsb2ciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./pages/index.tsx\n");

/***/ }),

/***/ "@improbable-eng/grpc-web":
/*!*******************************************!*\
  !*** external "@improbable-eng/grpc-web" ***!
  \*******************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@improbable-eng/grpc-web");

/***/ }),

/***/ "google-protobuf":
/*!**********************************!*\
  !*** external "google-protobuf" ***!
  \**********************************/
/***/ ((module) => {

"use strict";
module.exports = require("google-protobuf");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("react");

/***/ }),

/***/ "react/jsx-dev-runtime":
/*!****************************************!*\
  !*** external "react/jsx-dev-runtime" ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = require("react/jsx-dev-runtime");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("./pages/index.tsx"));
module.exports = __webpack_exports__;

})();