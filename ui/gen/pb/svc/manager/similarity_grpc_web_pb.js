/**
 * @fileoverview gRPC-Web generated client stub for pb.svc.manager.similarity
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.20.3
// source: pb/svc/manager/similarity.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.pb = {};
proto.pb.svc = {};
proto.pb.svc.manager = {};
proto.pb.svc.manager.similarity = require('./similarity_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.pb.svc.manager.similarity.SimilarityServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.pb.svc.manager.similarity.SimilarityServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pb.svc.manager.similarity.GetVocabListReq,
 *   !proto.pb.svc.manager.similarity.GetVocabListRes>}
 */
const methodDescriptor_SimilarityService_GetVocabList = new grpc.web.MethodDescriptor(
  '/pb.svc.manager.similarity.SimilarityService/GetVocabList',
  grpc.web.MethodType.UNARY,
  proto.pb.svc.manager.similarity.GetVocabListReq,
  proto.pb.svc.manager.similarity.GetVocabListRes,
  /**
   * @param {!proto.pb.svc.manager.similarity.GetVocabListReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pb.svc.manager.similarity.GetVocabListRes.deserializeBinary
);


/**
 * @param {!proto.pb.svc.manager.similarity.GetVocabListReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pb.svc.manager.similarity.GetVocabListRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pb.svc.manager.similarity.GetVocabListRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pb.svc.manager.similarity.SimilarityServiceClient.prototype.getVocabList =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pb.svc.manager.similarity.SimilarityService/GetVocabList',
      request,
      metadata || {},
      methodDescriptor_SimilarityService_GetVocabList,
      callback);
};


/**
 * @param {!proto.pb.svc.manager.similarity.GetVocabListReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pb.svc.manager.similarity.GetVocabListRes>}
 *     Promise that resolves to the response
 */
proto.pb.svc.manager.similarity.SimilarityServicePromiseClient.prototype.getVocabList =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pb.svc.manager.similarity.SimilarityService/GetVocabList',
      request,
      metadata || {},
      methodDescriptor_SimilarityService_GetVocabList);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pb.svc.manager.similarity.GetSimilarityReq,
 *   !proto.pb.svc.manager.similarity.GetSimilarityRes>}
 */
const methodDescriptor_SimilarityService_GetSimilarity = new grpc.web.MethodDescriptor(
  '/pb.svc.manager.similarity.SimilarityService/GetSimilarity',
  grpc.web.MethodType.UNARY,
  proto.pb.svc.manager.similarity.GetSimilarityReq,
  proto.pb.svc.manager.similarity.GetSimilarityRes,
  /**
   * @param {!proto.pb.svc.manager.similarity.GetSimilarityReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pb.svc.manager.similarity.GetSimilarityRes.deserializeBinary
);


/**
 * @param {!proto.pb.svc.manager.similarity.GetSimilarityReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pb.svc.manager.similarity.GetSimilarityRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pb.svc.manager.similarity.GetSimilarityRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pb.svc.manager.similarity.SimilarityServiceClient.prototype.getSimilarity =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pb.svc.manager.similarity.SimilarityService/GetSimilarity',
      request,
      metadata || {},
      methodDescriptor_SimilarityService_GetSimilarity,
      callback);
};


/**
 * @param {!proto.pb.svc.manager.similarity.GetSimilarityReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pb.svc.manager.similarity.GetSimilarityRes>}
 *     Promise that resolves to the response
 */
proto.pb.svc.manager.similarity.SimilarityServicePromiseClient.prototype.getSimilarity =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pb.svc.manager.similarity.SimilarityService/GetSimilarity',
      request,
      metadata || {},
      methodDescriptor_SimilarityService_GetSimilarity);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pb.svc.manager.similarity.WhenStartSimilarityReq,
 *   !proto.pb.svc.manager.similarity.WhenStartSimilarityRes>}
 */
const methodDescriptor_SimilarityService_WhenStartSimilarity = new grpc.web.MethodDescriptor(
  '/pb.svc.manager.similarity.SimilarityService/WhenStartSimilarity',
  grpc.web.MethodType.UNARY,
  proto.pb.svc.manager.similarity.WhenStartSimilarityReq,
  proto.pb.svc.manager.similarity.WhenStartSimilarityRes,
  /**
   * @param {!proto.pb.svc.manager.similarity.WhenStartSimilarityReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pb.svc.manager.similarity.WhenStartSimilarityRes.deserializeBinary
);


/**
 * @param {!proto.pb.svc.manager.similarity.WhenStartSimilarityReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pb.svc.manager.similarity.WhenStartSimilarityRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pb.svc.manager.similarity.WhenStartSimilarityRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pb.svc.manager.similarity.SimilarityServiceClient.prototype.whenStartSimilarity =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pb.svc.manager.similarity.SimilarityService/WhenStartSimilarity',
      request,
      metadata || {},
      methodDescriptor_SimilarityService_WhenStartSimilarity,
      callback);
};


/**
 * @param {!proto.pb.svc.manager.similarity.WhenStartSimilarityReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pb.svc.manager.similarity.WhenStartSimilarityRes>}
 *     Promise that resolves to the response
 */
proto.pb.svc.manager.similarity.SimilarityServicePromiseClient.prototype.whenStartSimilarity =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pb.svc.manager.similarity.SimilarityService/WhenStartSimilarity',
      request,
      metadata || {},
      methodDescriptor_SimilarityService_WhenStartSimilarity);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pb.svc.manager.similarity.WhenDoneSimilarityReq,
 *   !proto.pb.svc.manager.similarity.WhenDoneSimilarityRes>}
 */
const methodDescriptor_SimilarityService_WhenDoneSimilarity = new grpc.web.MethodDescriptor(
  '/pb.svc.manager.similarity.SimilarityService/WhenDoneSimilarity',
  grpc.web.MethodType.UNARY,
  proto.pb.svc.manager.similarity.WhenDoneSimilarityReq,
  proto.pb.svc.manager.similarity.WhenDoneSimilarityRes,
  /**
   * @param {!proto.pb.svc.manager.similarity.WhenDoneSimilarityReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pb.svc.manager.similarity.WhenDoneSimilarityRes.deserializeBinary
);


/**
 * @param {!proto.pb.svc.manager.similarity.WhenDoneSimilarityReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pb.svc.manager.similarity.WhenDoneSimilarityRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pb.svc.manager.similarity.WhenDoneSimilarityRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pb.svc.manager.similarity.SimilarityServiceClient.prototype.whenDoneSimilarity =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pb.svc.manager.similarity.SimilarityService/WhenDoneSimilarity',
      request,
      metadata || {},
      methodDescriptor_SimilarityService_WhenDoneSimilarity,
      callback);
};


/**
 * @param {!proto.pb.svc.manager.similarity.WhenDoneSimilarityReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pb.svc.manager.similarity.WhenDoneSimilarityRes>}
 *     Promise that resolves to the response
 */
proto.pb.svc.manager.similarity.SimilarityServicePromiseClient.prototype.whenDoneSimilarity =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pb.svc.manager.similarity.SimilarityService/WhenDoneSimilarity',
      request,
      metadata || {},
      methodDescriptor_SimilarityService_WhenDoneSimilarity);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pb.svc.manager.similarity.WhenSimilarityHavingErrReq,
 *   !proto.pb.svc.manager.similarity.WhenSimilarityHavingErrRes>}
 */
const methodDescriptor_SimilarityService_WhenSimilarityHavingErr = new grpc.web.MethodDescriptor(
  '/pb.svc.manager.similarity.SimilarityService/WhenSimilarityHavingErr',
  grpc.web.MethodType.UNARY,
  proto.pb.svc.manager.similarity.WhenSimilarityHavingErrReq,
  proto.pb.svc.manager.similarity.WhenSimilarityHavingErrRes,
  /**
   * @param {!proto.pb.svc.manager.similarity.WhenSimilarityHavingErrReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pb.svc.manager.similarity.WhenSimilarityHavingErrRes.deserializeBinary
);


/**
 * @param {!proto.pb.svc.manager.similarity.WhenSimilarityHavingErrReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pb.svc.manager.similarity.WhenSimilarityHavingErrRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pb.svc.manager.similarity.WhenSimilarityHavingErrRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pb.svc.manager.similarity.SimilarityServiceClient.prototype.whenSimilarityHavingErr =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pb.svc.manager.similarity.SimilarityService/WhenSimilarityHavingErr',
      request,
      metadata || {},
      methodDescriptor_SimilarityService_WhenSimilarityHavingErr,
      callback);
};


/**
 * @param {!proto.pb.svc.manager.similarity.WhenSimilarityHavingErrReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pb.svc.manager.similarity.WhenSimilarityHavingErrRes>}
 *     Promise that resolves to the response
 */
proto.pb.svc.manager.similarity.SimilarityServicePromiseClient.prototype.whenSimilarityHavingErr =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pb.svc.manager.similarity.SimilarityService/WhenSimilarityHavingErr',
      request,
      metadata || {},
      methodDescriptor_SimilarityService_WhenSimilarityHavingErr);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pb.svc.manager.similarity.WhenSimilarityHavingMsgReq,
 *   !proto.pb.svc.manager.similarity.WhenSimilarityHavingMsgRes>}
 */
const methodDescriptor_SimilarityService_WhenSimilarityHavingMsg = new grpc.web.MethodDescriptor(
  '/pb.svc.manager.similarity.SimilarityService/WhenSimilarityHavingMsg',
  grpc.web.MethodType.UNARY,
  proto.pb.svc.manager.similarity.WhenSimilarityHavingMsgReq,
  proto.pb.svc.manager.similarity.WhenSimilarityHavingMsgRes,
  /**
   * @param {!proto.pb.svc.manager.similarity.WhenSimilarityHavingMsgReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pb.svc.manager.similarity.WhenSimilarityHavingMsgRes.deserializeBinary
);


/**
 * @param {!proto.pb.svc.manager.similarity.WhenSimilarityHavingMsgReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pb.svc.manager.similarity.WhenSimilarityHavingMsgRes)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pb.svc.manager.similarity.WhenSimilarityHavingMsgRes>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pb.svc.manager.similarity.SimilarityServiceClient.prototype.whenSimilarityHavingMsg =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pb.svc.manager.similarity.SimilarityService/WhenSimilarityHavingMsg',
      request,
      metadata || {},
      methodDescriptor_SimilarityService_WhenSimilarityHavingMsg,
      callback);
};


/**
 * @param {!proto.pb.svc.manager.similarity.WhenSimilarityHavingMsgReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pb.svc.manager.similarity.WhenSimilarityHavingMsgRes>}
 *     Promise that resolves to the response
 */
proto.pb.svc.manager.similarity.SimilarityServicePromiseClient.prototype.whenSimilarityHavingMsg =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pb.svc.manager.similarity.SimilarityService/WhenSimilarityHavingMsg',
      request,
      metadata || {},
      methodDescriptor_SimilarityService_WhenSimilarityHavingMsg);
};


module.exports = proto.pb.svc.manager.similarity;

