syntax = "proto3";

package pb.svc.manager.similarity;
option go_package = "github.com/aglide100/dak-keyword/pb/svc/manager/similarity";

import "pb/unit/cosine_similarity/cosine_similarity.proto";
import "pb/unit/tfidf/tfidf.proto";
import "pb/unit/vocab/vocab.proto";

service SimilarityService {
    rpc GetVocabList(GetVocabListReq) returns (GetVocabListRes);
    rpc GetCosineSimilarity(GetCosineSimilarityReq) returns (GetCosineSimilarityRes);
    rpc GetTfidfScore(GetTfidfScoreReq) returns (GetTfidfScoreRes);
    rpc WhenStartSimilarity(WhenStartSimilarityReq) returns (WhenStartSimilarityRes);
    rpc WhenDoneSimilarity(WhenDoneSimilarityReq) returns (WhenDoneSimilarityRes);
    rpc WhenSimilarityHavingErr(WhenSimilarityHavingErrReq) returns (WhenSimilarityHavingErrRes);
    rpc WhenSimilarityHavingMsg(WhenSimilarityHavingMsgReq) returns (WhenSimilarityHavingMsgRes);
}

message WhenSimilarityHavingMsgReq {
    string id = 1;
    string msg = 2;
}

message WhenSimilarityHavingMsgRes {
    
}

message WhenSimilarityHavingErrReq {
    string id = 1;
    string msg = 2;
}

message WhenSimilarityHavingErrRes {
    
}

message WhenDoneSimilarityReq {
    string workerId = 1;
    string jobId = 2;
}

message WhenDoneSimilarityRes {
    string result = 1;
}

message WhenStartSimilarityReq {
    string id = 1;
}

message WhenStartSimilarityRes {
    string result = 1;
}

message GetCosineSimilarityReq {
    string worker_id = 1;
}   

message GetCosineSimilarityRes {
    unit.cosine_similarity.CosineSimilarity CosineSimilarity = 1;
}

message GetTfidfScoreReq {
    string worker_id = 1;
}

message GetTfidfScoreRes {
    repeated unit.tfidf.Tfidf Tfidf = 1;
}

message GetVocabListReq {
    string worker_id = 1;
}

message GetVocabListRes {
    unit.vocab.Vocab vocab = 1;
}

