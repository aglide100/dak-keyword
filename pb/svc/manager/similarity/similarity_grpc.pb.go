// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: pb/svc/manager/similarity.proto

package similarity

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SimilarityServiceClient is the client API for SimilarityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimilarityServiceClient interface {
	GetVocabList(ctx context.Context, in *GetVocabListReq, opts ...grpc.CallOption) (*GetVocabListRes, error)
	GetSimilarity(ctx context.Context, in *GetSimilarityReq, opts ...grpc.CallOption) (*GetSimilarityRes, error)
	WhenStartSimilarity(ctx context.Context, in *WhenStartSimilarityReq, opts ...grpc.CallOption) (*WhenStartSimilarityRes, error)
	WhenDoneSimilarity(ctx context.Context, in *WhenDoneSimilarityReq, opts ...grpc.CallOption) (*WhenDoneSimilarityRes, error)
	WhenHavingErrSimilarity(ctx context.Context, in *WhenHavingErrSimilarityReq, opts ...grpc.CallOption) (*WhenHavingErrSimilarityRes, error)
}

type similarityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSimilarityServiceClient(cc grpc.ClientConnInterface) SimilarityServiceClient {
	return &similarityServiceClient{cc}
}

func (c *similarityServiceClient) GetVocabList(ctx context.Context, in *GetVocabListReq, opts ...grpc.CallOption) (*GetVocabListRes, error) {
	out := new(GetVocabListRes)
	err := c.cc.Invoke(ctx, "/pb.svc.manager.similarity.SimilarityService/GetVocabList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *similarityServiceClient) GetSimilarity(ctx context.Context, in *GetSimilarityReq, opts ...grpc.CallOption) (*GetSimilarityRes, error) {
	out := new(GetSimilarityRes)
	err := c.cc.Invoke(ctx, "/pb.svc.manager.similarity.SimilarityService/GetSimilarity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *similarityServiceClient) WhenStartSimilarity(ctx context.Context, in *WhenStartSimilarityReq, opts ...grpc.CallOption) (*WhenStartSimilarityRes, error) {
	out := new(WhenStartSimilarityRes)
	err := c.cc.Invoke(ctx, "/pb.svc.manager.similarity.SimilarityService/WhenStartSimilarity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *similarityServiceClient) WhenDoneSimilarity(ctx context.Context, in *WhenDoneSimilarityReq, opts ...grpc.CallOption) (*WhenDoneSimilarityRes, error) {
	out := new(WhenDoneSimilarityRes)
	err := c.cc.Invoke(ctx, "/pb.svc.manager.similarity.SimilarityService/WhenDoneSimilarity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *similarityServiceClient) WhenHavingErrSimilarity(ctx context.Context, in *WhenHavingErrSimilarityReq, opts ...grpc.CallOption) (*WhenHavingErrSimilarityRes, error) {
	out := new(WhenHavingErrSimilarityRes)
	err := c.cc.Invoke(ctx, "/pb.svc.manager.similarity.SimilarityService/WhenHavingErrSimilarity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimilarityServiceServer is the server API for SimilarityService service.
// All implementations must embed UnimplementedSimilarityServiceServer
// for forward compatibility
type SimilarityServiceServer interface {
	GetVocabList(context.Context, *GetVocabListReq) (*GetVocabListRes, error)
	GetSimilarity(context.Context, *GetSimilarityReq) (*GetSimilarityRes, error)
	WhenStartSimilarity(context.Context, *WhenStartSimilarityReq) (*WhenStartSimilarityRes, error)
	WhenDoneSimilarity(context.Context, *WhenDoneSimilarityReq) (*WhenDoneSimilarityRes, error)
	WhenHavingErrSimilarity(context.Context, *WhenHavingErrSimilarityReq) (*WhenHavingErrSimilarityRes, error)
	mustEmbedUnimplementedSimilarityServiceServer()
}

// UnimplementedSimilarityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSimilarityServiceServer struct {
}

func (UnimplementedSimilarityServiceServer) GetVocabList(context.Context, *GetVocabListReq) (*GetVocabListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVocabList not implemented")
}
func (UnimplementedSimilarityServiceServer) GetSimilarity(context.Context, *GetSimilarityReq) (*GetSimilarityRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSimilarity not implemented")
}
func (UnimplementedSimilarityServiceServer) WhenStartSimilarity(context.Context, *WhenStartSimilarityReq) (*WhenStartSimilarityRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhenStartSimilarity not implemented")
}
func (UnimplementedSimilarityServiceServer) WhenDoneSimilarity(context.Context, *WhenDoneSimilarityReq) (*WhenDoneSimilarityRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhenDoneSimilarity not implemented")
}
func (UnimplementedSimilarityServiceServer) WhenHavingErrSimilarity(context.Context, *WhenHavingErrSimilarityReq) (*WhenHavingErrSimilarityRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhenHavingErrSimilarity not implemented")
}
func (UnimplementedSimilarityServiceServer) mustEmbedUnimplementedSimilarityServiceServer() {}

// UnsafeSimilarityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimilarityServiceServer will
// result in compilation errors.
type UnsafeSimilarityServiceServer interface {
	mustEmbedUnimplementedSimilarityServiceServer()
}

func RegisterSimilarityServiceServer(s grpc.ServiceRegistrar, srv SimilarityServiceServer) {
	s.RegisterService(&SimilarityService_ServiceDesc, srv)
}

func _SimilarityService_GetVocabList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVocabListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimilarityServiceServer).GetVocabList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.svc.manager.similarity.SimilarityService/GetVocabList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimilarityServiceServer).GetVocabList(ctx, req.(*GetVocabListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimilarityService_GetSimilarity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSimilarityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimilarityServiceServer).GetSimilarity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.svc.manager.similarity.SimilarityService/GetSimilarity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimilarityServiceServer).GetSimilarity(ctx, req.(*GetSimilarityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimilarityService_WhenStartSimilarity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhenStartSimilarityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimilarityServiceServer).WhenStartSimilarity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.svc.manager.similarity.SimilarityService/WhenStartSimilarity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimilarityServiceServer).WhenStartSimilarity(ctx, req.(*WhenStartSimilarityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimilarityService_WhenDoneSimilarity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhenDoneSimilarityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimilarityServiceServer).WhenDoneSimilarity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.svc.manager.similarity.SimilarityService/WhenDoneSimilarity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimilarityServiceServer).WhenDoneSimilarity(ctx, req.(*WhenDoneSimilarityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimilarityService_WhenHavingErrSimilarity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhenHavingErrSimilarityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimilarityServiceServer).WhenHavingErrSimilarity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.svc.manager.similarity.SimilarityService/WhenHavingErrSimilarity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimilarityServiceServer).WhenHavingErrSimilarity(ctx, req.(*WhenHavingErrSimilarityReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SimilarityService_ServiceDesc is the grpc.ServiceDesc for SimilarityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SimilarityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.svc.manager.similarity.SimilarityService",
	HandlerType: (*SimilarityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVocabList",
			Handler:    _SimilarityService_GetVocabList_Handler,
		},
		{
			MethodName: "GetSimilarity",
			Handler:    _SimilarityService_GetSimilarity_Handler,
		},
		{
			MethodName: "WhenStartSimilarity",
			Handler:    _SimilarityService_WhenStartSimilarity_Handler,
		},
		{
			MethodName: "WhenDoneSimilarity",
			Handler:    _SimilarityService_WhenDoneSimilarity_Handler,
		},
		{
			MethodName: "WhenHavingErrSimilarity",
			Handler:    _SimilarityService_WhenHavingErrSimilarity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/svc/manager/similarity.proto",
}
