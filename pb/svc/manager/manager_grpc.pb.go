// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: pb/svc/manager/manager.proto

package manager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateNewJob(ctx context.Context, in *CreateNewJobReq, opts ...grpc.CallOption) (*CreateNewJobRes, error)
	GetJobStatus(ctx context.Context, in *GetJobStatusReq, opts ...grpc.CallOption) (*GetJobStatusRes, error)
	GetJobList(ctx context.Context, in *GetJobListReq, opts ...grpc.CallOption) (*GetJobListRes, error)
	GetWorkerList(ctx context.Context, in *GetWorkerListReq, opts ...grpc.CallOption) (*GetWorkerListRes, error)
	GetArticleInfo(ctx context.Context, in *GetArticleInfoReq, opts ...grpc.CallOption) (*GetArticleInfoRes, error)
	GetArticleList(ctx context.Context, in *GetArticleListReq, opts ...grpc.CallOption) (*GetArticleListRes, error)
	UpdateWorkerStatus(ctx context.Context, in *UpdateWorkerStatusReq, opts ...grpc.CallOption) (*UpdateWorkerStatusRes, error)
	UpdateJobStatus(ctx context.Context, in *UpdateJobStatusReq, opts ...grpc.CallOption) (*UpdateJobStatusRes, error)
	WhenStartScraper(ctx context.Context, in *WhenStartScraperReq, opts ...grpc.CallOption) (*WhenStartScraperRes, error)
	WhenDoneScraper(ctx context.Context, in *WhenDoneScraperReq, opts ...grpc.CallOption) (*WhenDoneScraperRes, error)
	WhenStartAnalyzer(ctx context.Context, in *WhenStartAnalyzerReq, opts ...grpc.CallOption) (*WhenStartAnalyzerRes, error)
	WhenDoneAnalyzer(ctx context.Context, in *WhenDoneAnalyzerReq, opts ...grpc.CallOption) (*WhenDoneAnalyzerRes, error)
	WhenScraperHavingErr(ctx context.Context, in *WhenScraperHavingErrReq, opts ...grpc.CallOption) (*WhenScraperHavingErrRes, error)
	WhenAnalyzerHavingErr(ctx context.Context, in *WhenAnalyzerHavingErrReq, opts ...grpc.CallOption) (*WhenAnalyzerHavingErrRes, error)
	StopJob(ctx context.Context, in *StopJobReq, opts ...grpc.CallOption) (*StopJobRes, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateNewJob(ctx context.Context, in *CreateNewJobReq, opts ...grpc.CallOption) (*CreateNewJobRes, error) {
	out := new(CreateNewJobRes)
	err := c.cc.Invoke(ctx, "/pb.svc.manager.Manager/CreateNewJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetJobStatus(ctx context.Context, in *GetJobStatusReq, opts ...grpc.CallOption) (*GetJobStatusRes, error) {
	out := new(GetJobStatusRes)
	err := c.cc.Invoke(ctx, "/pb.svc.manager.Manager/GetJobStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetJobList(ctx context.Context, in *GetJobListReq, opts ...grpc.CallOption) (*GetJobListRes, error) {
	out := new(GetJobListRes)
	err := c.cc.Invoke(ctx, "/pb.svc.manager.Manager/GetJobList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetWorkerList(ctx context.Context, in *GetWorkerListReq, opts ...grpc.CallOption) (*GetWorkerListRes, error) {
	out := new(GetWorkerListRes)
	err := c.cc.Invoke(ctx, "/pb.svc.manager.Manager/GetWorkerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetArticleInfo(ctx context.Context, in *GetArticleInfoReq, opts ...grpc.CallOption) (*GetArticleInfoRes, error) {
	out := new(GetArticleInfoRes)
	err := c.cc.Invoke(ctx, "/pb.svc.manager.Manager/GetArticleInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetArticleList(ctx context.Context, in *GetArticleListReq, opts ...grpc.CallOption) (*GetArticleListRes, error) {
	out := new(GetArticleListRes)
	err := c.cc.Invoke(ctx, "/pb.svc.manager.Manager/GetArticleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateWorkerStatus(ctx context.Context, in *UpdateWorkerStatusReq, opts ...grpc.CallOption) (*UpdateWorkerStatusRes, error) {
	out := new(UpdateWorkerStatusRes)
	err := c.cc.Invoke(ctx, "/pb.svc.manager.Manager/UpdateWorkerStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateJobStatus(ctx context.Context, in *UpdateJobStatusReq, opts ...grpc.CallOption) (*UpdateJobStatusRes, error) {
	out := new(UpdateJobStatusRes)
	err := c.cc.Invoke(ctx, "/pb.svc.manager.Manager/UpdateJobStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) WhenStartScraper(ctx context.Context, in *WhenStartScraperReq, opts ...grpc.CallOption) (*WhenStartScraperRes, error) {
	out := new(WhenStartScraperRes)
	err := c.cc.Invoke(ctx, "/pb.svc.manager.Manager/WhenStartScraper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) WhenDoneScraper(ctx context.Context, in *WhenDoneScraperReq, opts ...grpc.CallOption) (*WhenDoneScraperRes, error) {
	out := new(WhenDoneScraperRes)
	err := c.cc.Invoke(ctx, "/pb.svc.manager.Manager/WhenDoneScraper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) WhenStartAnalyzer(ctx context.Context, in *WhenStartAnalyzerReq, opts ...grpc.CallOption) (*WhenStartAnalyzerRes, error) {
	out := new(WhenStartAnalyzerRes)
	err := c.cc.Invoke(ctx, "/pb.svc.manager.Manager/WhenStartAnalyzer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) WhenDoneAnalyzer(ctx context.Context, in *WhenDoneAnalyzerReq, opts ...grpc.CallOption) (*WhenDoneAnalyzerRes, error) {
	out := new(WhenDoneAnalyzerRes)
	err := c.cc.Invoke(ctx, "/pb.svc.manager.Manager/WhenDoneAnalyzer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) WhenScraperHavingErr(ctx context.Context, in *WhenScraperHavingErrReq, opts ...grpc.CallOption) (*WhenScraperHavingErrRes, error) {
	out := new(WhenScraperHavingErrRes)
	err := c.cc.Invoke(ctx, "/pb.svc.manager.Manager/WhenScraperHavingErr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) WhenAnalyzerHavingErr(ctx context.Context, in *WhenAnalyzerHavingErrReq, opts ...grpc.CallOption) (*WhenAnalyzerHavingErrRes, error) {
	out := new(WhenAnalyzerHavingErrRes)
	err := c.cc.Invoke(ctx, "/pb.svc.manager.Manager/WhenAnalyzerHavingErr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) StopJob(ctx context.Context, in *StopJobReq, opts ...grpc.CallOption) (*StopJobRes, error) {
	out := new(StopJobRes)
	err := c.cc.Invoke(ctx, "/pb.svc.manager.Manager/StopJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateNewJob(context.Context, *CreateNewJobReq) (*CreateNewJobRes, error)
	GetJobStatus(context.Context, *GetJobStatusReq) (*GetJobStatusRes, error)
	GetJobList(context.Context, *GetJobListReq) (*GetJobListRes, error)
	GetWorkerList(context.Context, *GetWorkerListReq) (*GetWorkerListRes, error)
	GetArticleInfo(context.Context, *GetArticleInfoReq) (*GetArticleInfoRes, error)
	GetArticleList(context.Context, *GetArticleListReq) (*GetArticleListRes, error)
	UpdateWorkerStatus(context.Context, *UpdateWorkerStatusReq) (*UpdateWorkerStatusRes, error)
	UpdateJobStatus(context.Context, *UpdateJobStatusReq) (*UpdateJobStatusRes, error)
	WhenStartScraper(context.Context, *WhenStartScraperReq) (*WhenStartScraperRes, error)
	WhenDoneScraper(context.Context, *WhenDoneScraperReq) (*WhenDoneScraperRes, error)
	WhenStartAnalyzer(context.Context, *WhenStartAnalyzerReq) (*WhenStartAnalyzerRes, error)
	WhenDoneAnalyzer(context.Context, *WhenDoneAnalyzerReq) (*WhenDoneAnalyzerRes, error)
	WhenScraperHavingErr(context.Context, *WhenScraperHavingErrReq) (*WhenScraperHavingErrRes, error)
	WhenAnalyzerHavingErr(context.Context, *WhenAnalyzerHavingErrReq) (*WhenAnalyzerHavingErrRes, error)
	StopJob(context.Context, *StopJobReq) (*StopJobRes, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateNewJob(context.Context, *CreateNewJobReq) (*CreateNewJobRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewJob not implemented")
}
func (UnimplementedManagerServer) GetJobStatus(context.Context, *GetJobStatusReq) (*GetJobStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobStatus not implemented")
}
func (UnimplementedManagerServer) GetJobList(context.Context, *GetJobListReq) (*GetJobListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobList not implemented")
}
func (UnimplementedManagerServer) GetWorkerList(context.Context, *GetWorkerListReq) (*GetWorkerListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerList not implemented")
}
func (UnimplementedManagerServer) GetArticleInfo(context.Context, *GetArticleInfoReq) (*GetArticleInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleInfo not implemented")
}
func (UnimplementedManagerServer) GetArticleList(context.Context, *GetArticleListReq) (*GetArticleListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleList not implemented")
}
func (UnimplementedManagerServer) UpdateWorkerStatus(context.Context, *UpdateWorkerStatusReq) (*UpdateWorkerStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkerStatus not implemented")
}
func (UnimplementedManagerServer) UpdateJobStatus(context.Context, *UpdateJobStatusReq) (*UpdateJobStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJobStatus not implemented")
}
func (UnimplementedManagerServer) WhenStartScraper(context.Context, *WhenStartScraperReq) (*WhenStartScraperRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhenStartScraper not implemented")
}
func (UnimplementedManagerServer) WhenDoneScraper(context.Context, *WhenDoneScraperReq) (*WhenDoneScraperRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhenDoneScraper not implemented")
}
func (UnimplementedManagerServer) WhenStartAnalyzer(context.Context, *WhenStartAnalyzerReq) (*WhenStartAnalyzerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhenStartAnalyzer not implemented")
}
func (UnimplementedManagerServer) WhenDoneAnalyzer(context.Context, *WhenDoneAnalyzerReq) (*WhenDoneAnalyzerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhenDoneAnalyzer not implemented")
}
func (UnimplementedManagerServer) WhenScraperHavingErr(context.Context, *WhenScraperHavingErrReq) (*WhenScraperHavingErrRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhenScraperHavingErr not implemented")
}
func (UnimplementedManagerServer) WhenAnalyzerHavingErr(context.Context, *WhenAnalyzerHavingErrReq) (*WhenAnalyzerHavingErrRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhenAnalyzerHavingErr not implemented")
}
func (UnimplementedManagerServer) StopJob(context.Context, *StopJobReq) (*StopJobRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopJob not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateNewJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNewJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateNewJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.svc.manager.Manager/CreateNewJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateNewJob(ctx, req.(*CreateNewJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetJobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.svc.manager.Manager/GetJobStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetJobStatus(ctx, req.(*GetJobStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetJobList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetJobList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.svc.manager.Manager/GetJobList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetJobList(ctx, req.(*GetJobListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetWorkerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkerListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetWorkerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.svc.manager.Manager/GetWorkerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetWorkerList(ctx, req.(*GetWorkerListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetArticleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetArticleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.svc.manager.Manager/GetArticleInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetArticleInfo(ctx, req.(*GetArticleInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetArticleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetArticleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.svc.manager.Manager/GetArticleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetArticleList(ctx, req.(*GetArticleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateWorkerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkerStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateWorkerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.svc.manager.Manager/UpdateWorkerStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateWorkerStatus(ctx, req.(*UpdateWorkerStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateJobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.svc.manager.Manager/UpdateJobStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateJobStatus(ctx, req.(*UpdateJobStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_WhenStartScraper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhenStartScraperReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).WhenStartScraper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.svc.manager.Manager/WhenStartScraper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).WhenStartScraper(ctx, req.(*WhenStartScraperReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_WhenDoneScraper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhenDoneScraperReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).WhenDoneScraper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.svc.manager.Manager/WhenDoneScraper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).WhenDoneScraper(ctx, req.(*WhenDoneScraperReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_WhenStartAnalyzer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhenStartAnalyzerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).WhenStartAnalyzer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.svc.manager.Manager/WhenStartAnalyzer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).WhenStartAnalyzer(ctx, req.(*WhenStartAnalyzerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_WhenDoneAnalyzer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhenDoneAnalyzerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).WhenDoneAnalyzer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.svc.manager.Manager/WhenDoneAnalyzer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).WhenDoneAnalyzer(ctx, req.(*WhenDoneAnalyzerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_WhenScraperHavingErr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhenScraperHavingErrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).WhenScraperHavingErr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.svc.manager.Manager/WhenScraperHavingErr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).WhenScraperHavingErr(ctx, req.(*WhenScraperHavingErrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_WhenAnalyzerHavingErr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhenAnalyzerHavingErrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).WhenAnalyzerHavingErr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.svc.manager.Manager/WhenAnalyzerHavingErr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).WhenAnalyzerHavingErr(ctx, req.(*WhenAnalyzerHavingErrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_StopJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).StopJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.svc.manager.Manager/StopJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).StopJob(ctx, req.(*StopJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.svc.manager.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewJob",
			Handler:    _Manager_CreateNewJob_Handler,
		},
		{
			MethodName: "GetJobStatus",
			Handler:    _Manager_GetJobStatus_Handler,
		},
		{
			MethodName: "GetJobList",
			Handler:    _Manager_GetJobList_Handler,
		},
		{
			MethodName: "GetWorkerList",
			Handler:    _Manager_GetWorkerList_Handler,
		},
		{
			MethodName: "GetArticleInfo",
			Handler:    _Manager_GetArticleInfo_Handler,
		},
		{
			MethodName: "GetArticleList",
			Handler:    _Manager_GetArticleList_Handler,
		},
		{
			MethodName: "UpdateWorkerStatus",
			Handler:    _Manager_UpdateWorkerStatus_Handler,
		},
		{
			MethodName: "UpdateJobStatus",
			Handler:    _Manager_UpdateJobStatus_Handler,
		},
		{
			MethodName: "WhenStartScraper",
			Handler:    _Manager_WhenStartScraper_Handler,
		},
		{
			MethodName: "WhenDoneScraper",
			Handler:    _Manager_WhenDoneScraper_Handler,
		},
		{
			MethodName: "WhenStartAnalyzer",
			Handler:    _Manager_WhenStartAnalyzer_Handler,
		},
		{
			MethodName: "WhenDoneAnalyzer",
			Handler:    _Manager_WhenDoneAnalyzer_Handler,
		},
		{
			MethodName: "WhenScraperHavingErr",
			Handler:    _Manager_WhenScraperHavingErr_Handler,
		},
		{
			MethodName: "WhenAnalyzerHavingErr",
			Handler:    _Manager_WhenAnalyzerHavingErr_Handler,
		},
		{
			MethodName: "StopJob",
			Handler:    _Manager_StopJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/svc/manager/manager.proto",
}
