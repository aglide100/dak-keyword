syntax = "proto3";

package pb.svc.manager;
option go_package = "github.com/aglide100/dak-keyword/pb/svc/manager";

import "pb/unit/job/job.proto";
import "pb/unit/worker/worker.proto";
import "pb/unit/article/article.proto";

service Manager {
    rpc CreateNewJob(CreateNewJobReq) returns (CreateNewJobRes);
    rpc ReRunJob(ReRunJobReq) returns (ReRunJobRes);
    rpc GetJobStatus(GetJobStatusReq) returns (GetJobStatusRes);
    rpc GetJobList(GetJobListReq) returns (GetJobListRes);
    rpc GetWorkerList(GetWorkerListReq) returns (GetWorkerListRes);
    rpc GetArticleInfo(GetArticleInfoReq) returns (GetArticleInfoRes); 
    rpc GetArticleList(GetArticleListReq) returns (GetArticleListRes);
    rpc GetArticleCountByHour(GetArticleCountByHourReq) returns (GetArticleCountByHourRes);
    rpc GetArticleCountByDay(GetArticleCountByDayReq) returns (GetArticleCountByDayRes);
    rpc UpdateWorkerStatus(UpdateWorkerStatusReq) returns (UpdateWorkerStatusRes);
    rpc UpdateJobStatus(UpdateJobStatusReq) returns (UpdateJobStatusRes);
    rpc WhenStartScraper(WhenStartScraperReq) returns (WhenStartScraperRes);
    rpc WhenDoneScraper(WhenDoneScraperReq) returns (WhenDoneScraperRes);
    rpc WhenStartAnalyzer(WhenStartAnalyzerReq) returns (WhenStartAnalyzerRes);
    rpc WhenDoneAnalyzer(WhenDoneAnalyzerReq) returns (WhenDoneAnalyzerRes);
    rpc WhenScraperHavingErr(WhenScraperHavingErrReq) returns (WhenScraperHavingErrRes);
    rpc WhenAnalyzerHavingErr(WhenAnalyzerHavingErrReq) returns (WhenAnalyzerHavingErrRes);
    rpc StopJob(StopJobReq) returns (StopJobRes);
}

message GetArticleCountByDayReq {
    string id = 1;
}

message GetArticleCountByDayRes {
    repeated unit.article.ArticleCount ArticleCount = 1;
}

message GetArticleCountByHourReq {
    string id = 1;
}

message GetArticleCountByHourRes {
    repeated unit.article.ArticleCount ArticleCount = 1;
}

message CreateNewJobReq {
    string keyword = 1;
    string owner = 2;
    string accessCode = 3;
}

message CreateNewJobRes {
    string msg = 1;
    // repeated string keyword = 1;
    // repeated string workerId = 2;
    // string jobId = 3;
}

message ReRunJobReq {
    string id = 1;
    string accessCode = 2;
}

message ReRunJobRes {
    string msg = 1;
}

message GetJobStatusReq {
    string id = 1;
    string owner = 2;
}

message GetJobStatusRes {
    string status = 1;
}

message StopJobReq {
    string id = 1;
}

message StopJobRes {
    string result = 1;
}

message WhenDoneScraperReq {
    string id = 1;
}

message WhenDoneScraperRes {
    string result = 1;
}

message WhenDoneAnalyzerReq {
    string id = 1;
}

message WhenDoneAnalyzerRes {
    string result = 1;
}

message UpdateJobStatusReq {
    string id = 1;
    string status = 2;
}

message UpdateJobStatusRes {
    string result = 1;
}

message GetJobListReq {}

message GetJobListRes {
    repeated unit.job.Job Job = 1;
}

message GetWorkerListReq {
    string id = 1;
}

message GetWorkerListRes {
    repeated unit.worker.Worker Worker = 1;
}

message GetArticleListReq {
    string id = 1;
    int32 page = 2;
}

message GetArticleListRes {
    repeated unit.article.Article Article = 1;
}

message GetArticleInfoReq {
    string id = 1;
}

message GetArticleInfoRes {
    int32 totalCount = 1;
    int32 pageCount = 2;
}

message WhenStartScraperReq{
    string id = 1;
}

message WhenStartScraperRes {
    string result = 1;
}

message WhenStartAnalyzerReq {
    string id = 1;
}

message WhenStartAnalyzerRes {
    string result = 1;
}

message WhenScraperHavingErrReq {
    string id = 1;
    string msg = 2;
}

message WhenScraperHavingErrRes {
    // passed
}

message WhenAnalyzerHavingErrReq {
    string id = 1;
    string msg = 2;
}
message WhenAnalyzerHavingErrRes {
    // passed
}

message UpdateWorkerStatusReq {
    string id = 1;
    string msg = 2;
}

message UpdateWorkerStatusRes {
    //  passed
}