// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: pb/svc/manager/scraper.proto

package scraper

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScraperServiceClient is the client API for ScraperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScraperServiceClient interface {
	WhenStartScraper(ctx context.Context, in *WhenStartScraperReq, opts ...grpc.CallOption) (*WhenStartScraperRes, error)
	WhenDoneScraper(ctx context.Context, in *WhenDoneScraperReq, opts ...grpc.CallOption) (*WhenDoneScraperRes, error)
	WhenScraperHavingMsg(ctx context.Context, in *WhenScraperHavingMsgReq, opts ...grpc.CallOption) (*WhenScraperHavingMsgRes, error)
	WhenScraperHavingErr(ctx context.Context, in *WhenScraperHavingErrReq, opts ...grpc.CallOption) (*WhenScraperHavingErrRes, error)
}

type scraperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScraperServiceClient(cc grpc.ClientConnInterface) ScraperServiceClient {
	return &scraperServiceClient{cc}
}

func (c *scraperServiceClient) WhenStartScraper(ctx context.Context, in *WhenStartScraperReq, opts ...grpc.CallOption) (*WhenStartScraperRes, error) {
	out := new(WhenStartScraperRes)
	err := c.cc.Invoke(ctx, "/pb.svc.manager.scraper.ScraperService/WhenStartScraper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scraperServiceClient) WhenDoneScraper(ctx context.Context, in *WhenDoneScraperReq, opts ...grpc.CallOption) (*WhenDoneScraperRes, error) {
	out := new(WhenDoneScraperRes)
	err := c.cc.Invoke(ctx, "/pb.svc.manager.scraper.ScraperService/WhenDoneScraper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scraperServiceClient) WhenScraperHavingMsg(ctx context.Context, in *WhenScraperHavingMsgReq, opts ...grpc.CallOption) (*WhenScraperHavingMsgRes, error) {
	out := new(WhenScraperHavingMsgRes)
	err := c.cc.Invoke(ctx, "/pb.svc.manager.scraper.ScraperService/WhenScraperHavingMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scraperServiceClient) WhenScraperHavingErr(ctx context.Context, in *WhenScraperHavingErrReq, opts ...grpc.CallOption) (*WhenScraperHavingErrRes, error) {
	out := new(WhenScraperHavingErrRes)
	err := c.cc.Invoke(ctx, "/pb.svc.manager.scraper.ScraperService/WhenScraperHavingErr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScraperServiceServer is the server API for ScraperService service.
// All implementations must embed UnimplementedScraperServiceServer
// for forward compatibility
type ScraperServiceServer interface {
	WhenStartScraper(context.Context, *WhenStartScraperReq) (*WhenStartScraperRes, error)
	WhenDoneScraper(context.Context, *WhenDoneScraperReq) (*WhenDoneScraperRes, error)
	WhenScraperHavingMsg(context.Context, *WhenScraperHavingMsgReq) (*WhenScraperHavingMsgRes, error)
	WhenScraperHavingErr(context.Context, *WhenScraperHavingErrReq) (*WhenScraperHavingErrRes, error)
	mustEmbedUnimplementedScraperServiceServer()
}

// UnimplementedScraperServiceServer must be embedded to have forward compatible implementations.
type UnimplementedScraperServiceServer struct {
}

func (UnimplementedScraperServiceServer) WhenStartScraper(context.Context, *WhenStartScraperReq) (*WhenStartScraperRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhenStartScraper not implemented")
}
func (UnimplementedScraperServiceServer) WhenDoneScraper(context.Context, *WhenDoneScraperReq) (*WhenDoneScraperRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhenDoneScraper not implemented")
}
func (UnimplementedScraperServiceServer) WhenScraperHavingMsg(context.Context, *WhenScraperHavingMsgReq) (*WhenScraperHavingMsgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhenScraperHavingMsg not implemented")
}
func (UnimplementedScraperServiceServer) WhenScraperHavingErr(context.Context, *WhenScraperHavingErrReq) (*WhenScraperHavingErrRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhenScraperHavingErr not implemented")
}
func (UnimplementedScraperServiceServer) mustEmbedUnimplementedScraperServiceServer() {}

// UnsafeScraperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScraperServiceServer will
// result in compilation errors.
type UnsafeScraperServiceServer interface {
	mustEmbedUnimplementedScraperServiceServer()
}

func RegisterScraperServiceServer(s grpc.ServiceRegistrar, srv ScraperServiceServer) {
	s.RegisterService(&ScraperService_ServiceDesc, srv)
}

func _ScraperService_WhenStartScraper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhenStartScraperReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScraperServiceServer).WhenStartScraper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.svc.manager.scraper.ScraperService/WhenStartScraper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScraperServiceServer).WhenStartScraper(ctx, req.(*WhenStartScraperReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScraperService_WhenDoneScraper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhenDoneScraperReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScraperServiceServer).WhenDoneScraper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.svc.manager.scraper.ScraperService/WhenDoneScraper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScraperServiceServer).WhenDoneScraper(ctx, req.(*WhenDoneScraperReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScraperService_WhenScraperHavingMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhenScraperHavingMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScraperServiceServer).WhenScraperHavingMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.svc.manager.scraper.ScraperService/WhenScraperHavingMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScraperServiceServer).WhenScraperHavingMsg(ctx, req.(*WhenScraperHavingMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScraperService_WhenScraperHavingErr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhenScraperHavingErrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScraperServiceServer).WhenScraperHavingErr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.svc.manager.scraper.ScraperService/WhenScraperHavingErr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScraperServiceServer).WhenScraperHavingErr(ctx, req.(*WhenScraperHavingErrReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ScraperService_ServiceDesc is the grpc.ServiceDesc for ScraperService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScraperService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.svc.manager.scraper.ScraperService",
	HandlerType: (*ScraperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WhenStartScraper",
			Handler:    _ScraperService_WhenStartScraper_Handler,
		},
		{
			MethodName: "WhenDoneScraper",
			Handler:    _ScraperService_WhenDoneScraper_Handler,
		},
		{
			MethodName: "WhenScraperHavingMsg",
			Handler:    _ScraperService_WhenScraperHavingMsg_Handler,
		},
		{
			MethodName: "WhenScraperHavingErr",
			Handler:    _ScraperService_WhenScraperHavingErr_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/svc/manager/scraper.proto",
}
