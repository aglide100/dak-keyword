# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from pb.svc.manager import analyzer_pb2 as pb_dot_svc_dot_manager_dot_analyzer__pb2


class AnalyzerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.WhenStartAnalyzer = channel.unary_unary(
                '/pb.svc.manager.analyzer.AnalyzerService/WhenStartAnalyzer',
                request_serializer=pb_dot_svc_dot_manager_dot_analyzer__pb2.WhenStartAnalyzerReq.SerializeToString,
                response_deserializer=pb_dot_svc_dot_manager_dot_analyzer__pb2.WhenStartAnalyzerRes.FromString,
                )
        self.WhenDoneAnalyzer = channel.unary_unary(
                '/pb.svc.manager.analyzer.AnalyzerService/WhenDoneAnalyzer',
                request_serializer=pb_dot_svc_dot_manager_dot_analyzer__pb2.WhenDoneAnalyzerReq.SerializeToString,
                response_deserializer=pb_dot_svc_dot_manager_dot_analyzer__pb2.WhenDoneAnalyzerRes.FromString,
                )
        self.WhenAnalyzerHavingErr = channel.unary_unary(
                '/pb.svc.manager.analyzer.AnalyzerService/WhenAnalyzerHavingErr',
                request_serializer=pb_dot_svc_dot_manager_dot_analyzer__pb2.WhenAnalyzerHavingErrReq.SerializeToString,
                response_deserializer=pb_dot_svc_dot_manager_dot_analyzer__pb2.WhenAnalyzerHavingErrRes.FromString,
                )


class AnalyzerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def WhenStartAnalyzer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WhenDoneAnalyzer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WhenAnalyzerHavingErr(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AnalyzerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'WhenStartAnalyzer': grpc.unary_unary_rpc_method_handler(
                    servicer.WhenStartAnalyzer,
                    request_deserializer=pb_dot_svc_dot_manager_dot_analyzer__pb2.WhenStartAnalyzerReq.FromString,
                    response_serializer=pb_dot_svc_dot_manager_dot_analyzer__pb2.WhenStartAnalyzerRes.SerializeToString,
            ),
            'WhenDoneAnalyzer': grpc.unary_unary_rpc_method_handler(
                    servicer.WhenDoneAnalyzer,
                    request_deserializer=pb_dot_svc_dot_manager_dot_analyzer__pb2.WhenDoneAnalyzerReq.FromString,
                    response_serializer=pb_dot_svc_dot_manager_dot_analyzer__pb2.WhenDoneAnalyzerRes.SerializeToString,
            ),
            'WhenAnalyzerHavingErr': grpc.unary_unary_rpc_method_handler(
                    servicer.WhenAnalyzerHavingErr,
                    request_deserializer=pb_dot_svc_dot_manager_dot_analyzer__pb2.WhenAnalyzerHavingErrReq.FromString,
                    response_serializer=pb_dot_svc_dot_manager_dot_analyzer__pb2.WhenAnalyzerHavingErrRes.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pb.svc.manager.analyzer.AnalyzerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AnalyzerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def WhenStartAnalyzer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pb.svc.manager.analyzer.AnalyzerService/WhenStartAnalyzer',
            pb_dot_svc_dot_manager_dot_analyzer__pb2.WhenStartAnalyzerReq.SerializeToString,
            pb_dot_svc_dot_manager_dot_analyzer__pb2.WhenStartAnalyzerRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WhenDoneAnalyzer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pb.svc.manager.analyzer.AnalyzerService/WhenDoneAnalyzer',
            pb_dot_svc_dot_manager_dot_analyzer__pb2.WhenDoneAnalyzerReq.SerializeToString,
            pb_dot_svc_dot_manager_dot_analyzer__pb2.WhenDoneAnalyzerRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WhenAnalyzerHavingErr(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pb.svc.manager.analyzer.AnalyzerService/WhenAnalyzerHavingErr',
            pb_dot_svc_dot_manager_dot_analyzer__pb2.WhenAnalyzerHavingErrReq.SerializeToString,
            pb_dot_svc_dot_manager_dot_analyzer__pb2.WhenAnalyzerHavingErrRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
